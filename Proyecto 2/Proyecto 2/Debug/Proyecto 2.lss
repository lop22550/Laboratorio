
Proyecto 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000008de  00000972  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800102  00800102  00000974  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b21  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000817  00000000  00000000  000015ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000790  00000000  00000000  00001dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00002554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cc  00000000  00000000  0000266c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026e  00000000  00000000  00002b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002da6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 00 02 	call	0x400	; 0x400 <main>
  9e:	0c 94 6d 04 	jmp	0x8da	; 0x8da <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initPWM1>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdint.h>

void initPWM1(void){
	DDRB |= (1<<PORTB1);	//Se está configurando el puerto OC1A como salida
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<PORTB2);	//Se está configurando el puerto OC1B como salida
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	84 b9       	out	0x04, r24	; 4
	
	TCCR1A = 0;
  b2:	a0 e8       	ldi	r26, 0x80	; 128
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	1c 92       	st	X, r1
	TCCR1B = 0;
  b8:	e1 e8       	ldi	r30, 0x81	; 129
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	10 82       	st	Z, r1
	
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11); // Configurando OC1A y OC1B como No invertido| Configurando Modo Fast PWM con ICR1 como TOP
  be:	8c 91       	ld	r24, X
  c0:	82 6a       	ori	r24, 0xA2	; 162
  c2:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM13)|(1<<WGM12)|(1<<CS12)|(1<<CS10); //Configurando Modo Fast PWM con ICR1 como TOP | Prescaler de 1024
  c4:	80 81       	ld	r24, Z
  c6:	8d 61       	ori	r24, 0x1D	; 29
  c8:	80 83       	st	Z, r24
	
	ICR1H = (PWM_TOP1 & 0xFF00)>>8;
  ca:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = (PWM_TOP1 & 0x00FF);
  ce:	8c e9       	ldi	r24, 0x9C	; 156
  d0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

	OCR1AH =(MIN1 & 0xFF00)>>8;
  d4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = (MIN1 & 0x00FF);
  d8:	83 e0       	ldi	r24, 0x03	; 3
  da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  de:	08 95       	ret

000000e0 <updateDutyCycle1A>:
}

uint8_t updateDutyCycle1A(uint8_t duty1){
	return (uint8_t)(((float)duty1/255)*(MAX1 - MIN1) + MIN1);
  e0:	68 2f       	mov	r22, r24
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__floatunsisf>
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	4f e7       	ldi	r20, 0x7F	; 127
  f2:	53 e4       	ldi	r21, 0x43	; 67
  f4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__divsf3>
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	48 e2       	ldi	r20, 0x28	; 40
  fe:	52 e4       	ldi	r21, 0x42	; 66
 100:	0e 94 00 04 	call	0x800	; 0x800 <__mulsf3>
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	40 e4       	ldi	r20, 0x40	; 64
 10a:	50 e4       	ldi	r21, 0x40	; 64
 10c:	0e 94 65 02 	call	0x4ca	; 0x4ca <__addsf3>
 110:	0e 94 43 03 	call	0x686	; 0x686 <__fixunssfsi>
 114:	86 2f       	mov	r24, r22
}
 116:	08 95       	ret

00000118 <initPWM2>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdint.h>

void initPWM2(void){
	DDRB |= (1<<DDB3);	//Se está configurando el puerto OC1A como salida
 118:	84 b1       	in	r24, 0x04	; 4
 11a:	88 60       	ori	r24, 0x08	; 8
 11c:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<DDD3);
 11e:	8a b1       	in	r24, 0x0a	; 10
 120:	88 60       	ori	r24, 0x08	; 8
 122:	8a b9       	out	0x0a, r24	; 10

	TCCR2A = 0;
 124:	a0 eb       	ldi	r26, 0xB0	; 176
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	1c 92       	st	X, r1
	TCCR2B = 0;
 12a:	e1 eb       	ldi	r30, 0xB1	; 177
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	10 82       	st	Z, r1
	
	TCCR2A |= (1<<COM2A1)|(1<<COM2B1)|(1<<WGM21)|(1<<WGM20); // Configurando OC1A como No invertido | Configurando Modo Fast PWM OCR2A
 130:	8c 91       	ld	r24, X
 132:	83 6a       	ori	r24, 0xA3	; 163
 134:	8c 93       	st	X, r24
	TCCR2B |=(1<<WGM22)|(1<<CS22)|(1<<CS21)|(1<<CS20); //Configurando Modo Fast PWM OCR2A | Prescaler de 1024
 136:	80 81       	ld	r24, Z
 138:	8f 60       	ori	r24, 0x0F	; 15
 13a:	80 83       	st	Z, r24
	//TCCR2B &= ~(1<<WGM22);

	OCR2A = (MIN2 & 0xFF);
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = (MIN2 & 0xFF);
 142:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 146:	08 95       	ret

00000148 <updateDutyCycle2A>:
	
}

uint8_t updateDutyCycle2A(uint8_t duty3){
	return (uint8_t)(((float)duty3/255)*(MAX2 - MIN2) + MIN2);
 148:	68 2f       	mov	r22, r24
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__floatunsisf>
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	4f e7       	ldi	r20, 0x7F	; 127
 15a:	53 e4       	ldi	r21, 0x43	; 67
 15c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__divsf3>
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	48 e2       	ldi	r20, 0x28	; 40
 166:	52 e4       	ldi	r21, 0x42	; 66
 168:	0e 94 00 04 	call	0x800	; 0x800 <__mulsf3>
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	40 e4       	ldi	r20, 0x40	; 64
 172:	50 e4       	ldi	r21, 0x40	; 64
 174:	0e 94 65 02 	call	0x4ca	; 0x4ca <__addsf3>
 178:	0e 94 43 03 	call	0x686	; 0x686 <__fixunssfsi>
 17c:	86 2f       	mov	r24, r22

}
 17e:	08 95       	ret

00000180 <updateDutyCycle2B>:
uint8_t updateDutyCycle2B(uint8_t duty4){
	return (uint8_t)(((float)duty4/255)*(MAX2 - MIN2) + MIN2);
 180:	68 2f       	mov	r22, r24
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__floatunsisf>
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	4f e7       	ldi	r20, 0x7F	; 127
 192:	53 e4       	ldi	r21, 0x43	; 67
 194:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__divsf3>
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	48 e2       	ldi	r20, 0x28	; 40
 19e:	52 e4       	ldi	r21, 0x42	; 66
 1a0:	0e 94 00 04 	call	0x800	; 0x800 <__mulsf3>
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	40 e4       	ldi	r20, 0x40	; 64
 1aa:	50 e4       	ldi	r21, 0x40	; 64
 1ac:	0e 94 65 02 	call	0x4ca	; 0x4ca <__addsf3>
 1b0:	0e 94 43 03 	call	0x686	; 0x686 <__fixunssfsi>
 1b4:	86 2f       	mov	r24, r22
 1b6:	08 95       	ret

000001b8 <InitADC>:
		
    }
}

void InitADC(void){
	ADCSRA = 0;
 1b8:	aa e7       	ldi	r26, 0x7A	; 122
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	1c 92       	st	X, r1
	ADMUX = 0; 
 1be:	ec e7       	ldi	r30, 0x7C	; 124
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	10 82       	st	Z, r1
	ADMUX |= (1<<ADLAR); //AJUSTE A LA IZQUIERDA (SOLO SE USA ADCH)
 1c4:	80 81       	ld	r24, Z
 1c6:	80 62       	ori	r24, 0x20	; 32
 1c8:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //Selecciona un voltaje interno de referencia de 5V.
 1ca:	80 81       	ld	r24, Z
 1cc:	80 64       	ori	r24, 0x40	; 64
 1ce:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
 1d0:	80 81       	ld	r24, Z
 1d2:	8f 77       	andi	r24, 0x7F	; 127
 1d4:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Enciente ADC | Prescaler de 128 (125kHZ)
 1d6:	8c 91       	ld	r24, X
 1d8:	87 60       	ori	r24, 0x07	; 7
 1da:	8c 93       	st	X, r24
 1dc:	08 95       	ret

000001de <checkADC>:
	//DIDR0 |= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D)|(1<<ADC3D);
} 

void checkADC(void){
	
	switch(Cambio){
 1de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	89 f1       	breq	.+98     	; 0x248 <checkADC+0x6a>
 1e6:	60 f0       	brcs	.+24     	; 0x200 <checkADC+0x22>
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	09 f4       	brne	.+2      	; 0x1ee <checkADC+0x10>
 1ec:	54 c0       	rjmp	.+168    	; 0x296 <checkADC+0xb8>
 1ee:	83 30       	cpi	r24, 0x03	; 3
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <checkADC+0x16>
 1f2:	7b c0       	rjmp	.+246    	; 0x2ea <checkADC+0x10c>
 1f4:	08 95       	ret
		case 0:
			while (ADCSRA & (1<<ADEN)){ADCSRA &= ~(1<<ADEN);}
 1f6:	ea e7       	ldi	r30, 0x7A	; 122
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	8f 77       	andi	r24, 0x7F	; 127
 1fe:	80 83       	st	Z, r24
 200:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 204:	88 23       	and	r24, r24
 206:	bc f3       	brlt	.-18     	; 0x1f6 <checkADC+0x18>
			Cambio = 1; 
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));
 20e:	ec e7       	ldi	r30, 0x7C	; 124
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	88 7f       	andi	r24, 0xF8	; 248
 216:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADEN);
 218:	ea e7       	ldi	r30, 0x7A	; 122
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	80 68       	ori	r24, 0x80	; 128
 220:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
 222:	80 81       	ld	r24, Z
 224:	80 64       	ori	r24, 0x40	; 64
 226:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 228:	8f e1       	ldi	r24, 0x1F	; 31
 22a:	9e e4       	ldi	r25, 0x4E	; 78
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <checkADC+0x4e>
 230:	00 c0       	rjmp	.+0      	; 0x232 <checkADC+0x54>
 232:	00 00       	nop
			_delay_ms(5);
			valor_ADC1 = ADCH;
 234:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 238:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <valor_ADC1>
			
			break;
 23c:	08 95       	ret
			
		case 1:
			while (ADCSRA & (1<<ADEN)){ADCSRA &= ~(1<<ADEN);}
 23e:	ea e7       	ldi	r30, 0x7A	; 122
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	8f 77       	andi	r24, 0x7F	; 127
 246:	80 83       	st	Z, r24
 248:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 24c:	88 23       	and	r24, r24
 24e:	bc f3       	brlt	.-18     	; 0x23e <checkADC+0x60>
			Cambio = 2; 
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));
 256:	ec e7       	ldi	r30, 0x7C	; 124
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	88 7f       	andi	r24, 0xF8	; 248
 25e:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX0);
 260:	80 81       	ld	r24, Z
 262:	81 60       	ori	r24, 0x01	; 1
 264:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADEN);
 266:	ea e7       	ldi	r30, 0x7A	; 122
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	80 68       	ori	r24, 0x80	; 128
 26e:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
 270:	80 81       	ld	r24, Z
 272:	80 64       	ori	r24, 0x40	; 64
 274:	80 83       	st	Z, r24
 276:	8f e1       	ldi	r24, 0x1F	; 31
 278:	9e e4       	ldi	r25, 0x4E	; 78
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <checkADC+0x9c>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <checkADC+0xa2>
 280:	00 00       	nop
			_delay_ms(5);
			valor_ADC2 = ADCH;
 282:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 286:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <valor_ADC2>
			break;
 28a:	08 95       	ret
		
		case 2: 
			while (ADCSRA & (1<<ADEN)){ADCSRA &= ~(1<<ADEN);}
 28c:	ea e7       	ldi	r30, 0x7A	; 122
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	8f 77       	andi	r24, 0x7F	; 127
 294:	80 83       	st	Z, r24
 296:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 29a:	88 23       	and	r24, r24
 29c:	bc f3       	brlt	.-18     	; 0x28c <checkADC+0xae>
			Cambio = 3; 
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));
 2a4:	ec e7       	ldi	r30, 0x7C	; 124
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	88 7f       	andi	r24, 0xF8	; 248
 2ac:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX1);
 2ae:	80 81       	ld	r24, Z
 2b0:	82 60       	ori	r24, 0x02	; 2
 2b2:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX0);
 2b4:	80 81       	ld	r24, Z
 2b6:	81 60       	ori	r24, 0x01	; 1
 2b8:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADEN);
 2ba:	ea e7       	ldi	r30, 0x7A	; 122
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	80 68       	ori	r24, 0x80	; 128
 2c2:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
 2c4:	80 81       	ld	r24, Z
 2c6:	80 64       	ori	r24, 0x40	; 64
 2c8:	80 83       	st	Z, r24
 2ca:	8f e1       	ldi	r24, 0x1F	; 31
 2cc:	9e e4       	ldi	r25, 0x4E	; 78
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <checkADC+0xf0>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <checkADC+0xf6>
 2d4:	00 00       	nop
			_delay_ms(5);
			valor_ADC3 = ADCH;
 2d6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valor_ADC3>
			break;
 2de:	08 95       	ret
			
		case 3: 
			while (ADCSRA & (1<<ADEN)){ADCSRA &= ~(1<<ADEN);}
 2e0:	ea e7       	ldi	r30, 0x7A	; 122
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	8f 77       	andi	r24, 0x7F	; 127
 2e8:	80 83       	st	Z, r24
 2ea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2ee:	88 23       	and	r24, r24
 2f0:	bc f3       	brlt	.-18     	; 0x2e0 <checkADC+0x102>
			Cambio = 0; 
 2f2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));
 2f6:	ec e7       	ldi	r30, 0x7C	; 124
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	88 7f       	andi	r24, 0xF8	; 248
 2fe:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX1)|(1<<MUX0);
 300:	80 81       	ld	r24, Z
 302:	83 60       	ori	r24, 0x03	; 3
 304:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX0);
 306:	80 81       	ld	r24, Z
 308:	81 60       	ori	r24, 0x01	; 1
 30a:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADEN);
 30c:	ea e7       	ldi	r30, 0x7A	; 122
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	80 68       	ori	r24, 0x80	; 128
 314:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
 316:	80 81       	ld	r24, Z
 318:	80 64       	ori	r24, 0x40	; 64
 31a:	80 83       	st	Z, r24
 31c:	8f e1       	ldi	r24, 0x1F	; 31
 31e:	9e e4       	ldi	r25, 0x4E	; 78
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <checkADC+0x142>
 324:	00 c0       	rjmp	.+0      	; 0x326 <checkADC+0x148>
 326:	00 00       	nop
			_delay_ms(5);
			valor_ADC4 = ADCH;
 328:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 32c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <valor_ADC4>
 330:	08 95       	ret

00000332 <init>:
	
	
}

void init (void){
	CLKPR |= (1<<CLKPCE)|(1<< CLKPS0);
 332:	e1 e6       	ldi	r30, 0x61	; 97
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	81 68       	ori	r24, 0x81	; 129
 33a:	80 83       	st	Z, r24
	
	DDRD |= (1<<DDD4); 
 33c:	8a b1       	in	r24, 0x0a	; 10
 33e:	80 61       	ori	r24, 0x10	; 16
 340:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PORTD4);
 342:	8b b1       	in	r24, 0x0b	; 11
 344:	8f 7e       	andi	r24, 0xEF	; 239
 346:	8b b9       	out	0x0b, r24	; 11
	
	DDRD |= (1<<DDD5);
 348:	8a b1       	in	r24, 0x0a	; 10
 34a:	80 62       	ori	r24, 0x20	; 32
 34c:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PORTD5);
 34e:	8b b1       	in	r24, 0x0b	; 11
 350:	8f 7d       	andi	r24, 0xDF	; 223
 352:	8b b9       	out	0x0b, r24	; 11
	
	DDRD |= (1<<DDD6);
 354:	8a b1       	in	r24, 0x0a	; 10
 356:	80 64       	ori	r24, 0x40	; 64
 358:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PORTD6);
 35a:	8b b1       	in	r24, 0x0b	; 11
 35c:	8f 7b       	andi	r24, 0xBF	; 191
 35e:	8b b9       	out	0x0b, r24	; 11
	
	DDRD |= (1<<DDD7);
 360:	8a b1       	in	r24, 0x0a	; 10
 362:	80 68       	ori	r24, 0x80	; 128
 364:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PORTD7);
 366:	8b b1       	in	r24, 0x0b	; 11
 368:	8f 77       	andi	r24, 0x7F	; 127
 36a:	8b b9       	out	0x0b, r24	; 11
	
	//botones
	DDRB &= ~(1<<DDB0);
 36c:	84 b1       	in	r24, 0x04	; 4
 36e:	8e 7f       	andi	r24, 0xFE	; 254
 370:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB0); //modo
 372:	85 b1       	in	r24, 0x05	; 5
 374:	81 60       	ori	r24, 0x01	; 1
 376:	85 b9       	out	0x05, r24	; 5
	
	DDRB &= ~(1<<DDB4);
 378:	84 b1       	in	r24, 0x04	; 4
 37a:	8f 7e       	andi	r24, 0xEF	; 239
 37c:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB4); //pos 1
 37e:	85 b1       	in	r24, 0x05	; 5
 380:	80 61       	ori	r24, 0x10	; 16
 382:	85 b9       	out	0x05, r24	; 5
	
	DDRB &= ~(1<<DDB5);
 384:	84 b1       	in	r24, 0x04	; 4
 386:	8f 7d       	andi	r24, 0xDF	; 223
 388:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB5); //pos 2
 38a:	85 b1       	in	r24, 0x05	; 5
 38c:	80 62       	ori	r24, 0x20	; 32
 38e:	85 b9       	out	0x05, r24	; 5
	
	DDRC &= ~(1<<DDC4);
 390:	87 b1       	in	r24, 0x07	; 7
 392:	8f 7e       	andi	r24, 0xEF	; 239
 394:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<PORTC4); //pos 3
 396:	88 b1       	in	r24, 0x08	; 8
 398:	80 61       	ori	r24, 0x10	; 16
 39a:	88 b9       	out	0x08, r24	; 8
	
	DDRD &= ~(1<<DDD2);
 39c:	8a b1       	in	r24, 0x0a	; 10
 39e:	8b 7f       	andi	r24, 0xFB	; 251
 3a0:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD2); //pos 4
 3a2:	8b b1       	in	r24, 0x0b	; 11
 3a4:	84 60       	ori	r24, 0x04	; 4
 3a6:	8b b9       	out	0x0b, r24	; 11
	
	//CONFIGURACIÓN DE INTERRUPCION PIN CHANGE
	PCICR |= (1<<PCIE0);
 3a8:	e8 e6       	ldi	r30, 0x68	; 104
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	81 60       	ori	r24, 0x01	; 1
 3b0:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT0);
 3b2:	eb e6       	ldi	r30, 0x6B	; 107
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	81 60       	ori	r24, 0x01	; 1
 3ba:	80 83       	st	Z, r24
 3bc:	08 95       	ret

000003be <updateRGBLed>:

}


void updateRGBLed(void) {
	switch (Estado) {
 3be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3c2:	82 30       	cpi	r24, 0x02	; 2
 3c4:	59 f0       	breq	.+22     	; 0x3dc <updateRGBLed+0x1e>
 3c6:	83 30       	cpi	r24, 0x03	; 3
 3c8:	81 f0       	breq	.+32     	; 0x3ea <updateRGBLed+0x2c>
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	a9 f4       	brne	.+42     	; 0x3f8 <updateRGBLed+0x3a>
		case 1:
		PORTD |= (1 << PORTD4); 
 3ce:	8b b1       	in	r24, 0x0b	; 11
 3d0:	80 61       	ori	r24, 0x10	; 16
 3d2:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~((1 << PORTD5)|(1<<PORTD6));
 3d4:	8b b1       	in	r24, 0x0b	; 11
 3d6:	8f 79       	andi	r24, 0x9F	; 159
 3d8:	8b b9       	out	0x0b, r24	; 11
		
		break;
 3da:	08 95       	ret
		case 2:
		PORTD |= (1 << PORTD5);
 3dc:	8b b1       	in	r24, 0x0b	; 11
 3de:	80 62       	ori	r24, 0x20	; 32
 3e0:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~((1 << PORTD4)|(1<<PORTD6));
 3e2:	8b b1       	in	r24, 0x0b	; 11
 3e4:	8f 7a       	andi	r24, 0xAF	; 175
 3e6:	8b b9       	out	0x0b, r24	; 11
		break;
 3e8:	08 95       	ret
		case 3:
		PORTD |= (1 << PORTD6);
 3ea:	8b b1       	in	r24, 0x0b	; 11
 3ec:	80 64       	ori	r24, 0x40	; 64
 3ee:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~((1 << PORTD4)|(1<<PORTD5));
 3f0:	8b b1       	in	r24, 0x0b	; 11
 3f2:	8f 7c       	andi	r24, 0xCF	; 207
 3f4:	8b b9       	out	0x0b, r24	; 11
		break;
 3f6:	08 95       	ret
		default:
		PORTD &= ~((1 << PORTD4)|(1 << PORTD5)|(1 << PORTD6)); 
 3f8:	8b b1       	in	r24, 0x0b	; 11
 3fa:	8f 78       	andi	r24, 0x8F	; 143
 3fc:	8b b9       	out	0x0b, r24	; 11
 3fe:	08 95       	ret

00000400 <main>:
void init (void); 
void updateRGBLed(void);

int main(void)
{
	cli();
 400:	f8 94       	cli
	init();
 402:	0e 94 99 01 	call	0x332	; 0x332 <init>
	InitADC(); 
 406:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <InitADC>
	initPWM1();
 40a:	0e 94 53 00 	call	0xa6	; 0xa6 <initPWM1>
	initPWM2();
 40e:	0e 94 8c 00 	call	0x118	; 0x118 <initPWM2>
	sei();
 412:	78 94       	sei
    
    while (1) 
    {
		//PORTD |= (1<<PORTD5); 
		checkADC();
 414:	0e 94 ef 00 	call	0x1de	; 0x1de <checkADC>
		OCR1A = updateDutyCycle1A(valor_ADC1); 
 418:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <valor_ADC1>
 41c:	0e 94 70 00 	call	0xe0	; 0xe0 <updateDutyCycle1A>
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 426:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = updateDutyCycle1A(valor_ADC2); 
 42a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <valor_ADC2>
 42e:	0e 94 70 00 	call	0xe0	; 0xe0 <updateDutyCycle1A>
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 438:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		OCR2A = updateDutyCycle2A(valor_ADC3);
 43c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <valor_ADC3>
 440:	0e 94 a4 00 	call	0x148	; 0x148 <updateDutyCycle2A>
 444:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
		OCR2B = updateDutyCycle2B(valor_ADC4);
 448:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <valor_ADC4>
 44c:	0e 94 c0 00 	call	0x180	; 0x180 <updateDutyCycle2B>
 450:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
		
		
		updateRGBLed();
 454:	0e 94 df 01 	call	0x3be	; 0x3be <updateRGBLed>
 458:	dd cf       	rjmp	.-70     	; 0x414 <main+0x14>

0000045a <__vector_3>:
	}
}


//Interrupciones --------------------------------------------------------
ISR(PCINT0_vect){
 45a:	1f 92       	push	r1
 45c:	0f 92       	push	r0
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	0f 92       	push	r0
 462:	11 24       	eor	r1, r1
 464:	2f 93       	push	r18
 466:	8f 93       	push	r24
 468:	9f 93       	push	r25
	
	if (!(PINB & (1 << PINB))) {
 46a:	83 b1       	in	r24, 0x03	; 3
 46c:	23 b1       	in	r18, 0x03	; 3
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	02 c0       	rjmp	.+4      	; 0x476 <__vector_3+0x1c>
 472:	95 95       	asr	r25
 474:	87 95       	ror	r24
 476:	2a 95       	dec	r18
 478:	e2 f7       	brpl	.-8      	; 0x472 <__vector_3+0x18>
 47a:	80 fd       	sbrc	r24, 0
 47c:	1d c0       	rjmp	.+58     	; 0x4b8 <__vector_3+0x5e>
 47e:	2f ef       	ldi	r18, 0xFF	; 255
 480:	80 e7       	ldi	r24, 0x70	; 112
 482:	92 e0       	ldi	r25, 0x02	; 2
 484:	21 50       	subi	r18, 0x01	; 1
 486:	80 40       	sbci	r24, 0x00	; 0
 488:	90 40       	sbci	r25, 0x00	; 0
 48a:	e1 f7       	brne	.-8      	; 0x484 <__vector_3+0x2a>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <__vector_3+0x34>
 48e:	00 00       	nop
		_delay_ms(DEBOUNCE_TIME); // Anti-rebote
		if (!(PINB & (1 << PINB))){ // Verificar de nuevo el pin después del delay
 490:	83 b1       	in	r24, 0x03	; 3
 492:	23 b1       	in	r18, 0x03	; 3
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <__vector_3+0x42>
 498:	95 95       	asr	r25
 49a:	87 95       	ror	r24
 49c:	2a 95       	dec	r18
 49e:	e2 f7       	brpl	.-8      	; 0x498 <__vector_3+0x3e>
 4a0:	80 fd       	sbrc	r24, 0
 4a2:	0a c0       	rjmp	.+20     	; 0x4b8 <__vector_3+0x5e>
			// Cambio de estado
			Estado++;
 4a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4a8:	8f 5f       	subi	r24, 0xFF	; 255
 4aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if (Estado > 3) {
 4ae:	84 30       	cpi	r24, 0x04	; 4
 4b0:	18 f0       	brcs	.+6      	; 0x4b8 <__vector_3+0x5e>
				Estado = 1;
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
			
		}
}
 4b8:	9f 91       	pop	r25
 4ba:	8f 91       	pop	r24
 4bc:	2f 91       	pop	r18
 4be:	0f 90       	pop	r0
 4c0:	0f be       	out	0x3f, r0	; 63
 4c2:	0f 90       	pop	r0
 4c4:	1f 90       	pop	r1
 4c6:	18 95       	reti

000004c8 <__subsf3>:
 4c8:	50 58       	subi	r21, 0x80	; 128

000004ca <__addsf3>:
 4ca:	bb 27       	eor	r27, r27
 4cc:	aa 27       	eor	r26, r26
 4ce:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__addsf3x>
 4d2:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__fp_round>
 4d6:	0e 94 b8 03 	call	0x770	; 0x770 <__fp_pscA>
 4da:	38 f0       	brcs	.+14     	; 0x4ea <__addsf3+0x20>
 4dc:	0e 94 bf 03 	call	0x77e	; 0x77e <__fp_pscB>
 4e0:	20 f0       	brcs	.+8      	; 0x4ea <__addsf3+0x20>
 4e2:	39 f4       	brne	.+14     	; 0x4f2 <__addsf3+0x28>
 4e4:	9f 3f       	cpi	r25, 0xFF	; 255
 4e6:	19 f4       	brne	.+6      	; 0x4ee <__addsf3+0x24>
 4e8:	26 f4       	brtc	.+8      	; 0x4f2 <__addsf3+0x28>
 4ea:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_nan>
 4ee:	0e f4       	brtc	.+2      	; 0x4f2 <__addsf3+0x28>
 4f0:	e0 95       	com	r30
 4f2:	e7 fb       	bst	r30, 7
 4f4:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_inf>

000004f8 <__addsf3x>:
 4f8:	e9 2f       	mov	r30, r25
 4fa:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fp_split3>
 4fe:	58 f3       	brcs	.-42     	; 0x4d6 <__addsf3+0xc>
 500:	ba 17       	cp	r27, r26
 502:	62 07       	cpc	r22, r18
 504:	73 07       	cpc	r23, r19
 506:	84 07       	cpc	r24, r20
 508:	95 07       	cpc	r25, r21
 50a:	20 f0       	brcs	.+8      	; 0x514 <__addsf3x+0x1c>
 50c:	79 f4       	brne	.+30     	; 0x52c <__addsf3x+0x34>
 50e:	a6 f5       	brtc	.+104    	; 0x578 <__addsf3x+0x80>
 510:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__fp_zero>
 514:	0e f4       	brtc	.+2      	; 0x518 <__addsf3x+0x20>
 516:	e0 95       	com	r30
 518:	0b 2e       	mov	r0, r27
 51a:	ba 2f       	mov	r27, r26
 51c:	a0 2d       	mov	r26, r0
 51e:	0b 01       	movw	r0, r22
 520:	b9 01       	movw	r22, r18
 522:	90 01       	movw	r18, r0
 524:	0c 01       	movw	r0, r24
 526:	ca 01       	movw	r24, r20
 528:	a0 01       	movw	r20, r0
 52a:	11 24       	eor	r1, r1
 52c:	ff 27       	eor	r31, r31
 52e:	59 1b       	sub	r21, r25
 530:	99 f0       	breq	.+38     	; 0x558 <__addsf3x+0x60>
 532:	59 3f       	cpi	r21, 0xF9	; 249
 534:	50 f4       	brcc	.+20     	; 0x54a <__addsf3x+0x52>
 536:	50 3e       	cpi	r21, 0xE0	; 224
 538:	68 f1       	brcs	.+90     	; 0x594 <__addsf3x+0x9c>
 53a:	1a 16       	cp	r1, r26
 53c:	f0 40       	sbci	r31, 0x00	; 0
 53e:	a2 2f       	mov	r26, r18
 540:	23 2f       	mov	r18, r19
 542:	34 2f       	mov	r19, r20
 544:	44 27       	eor	r20, r20
 546:	58 5f       	subi	r21, 0xF8	; 248
 548:	f3 cf       	rjmp	.-26     	; 0x530 <__addsf3x+0x38>
 54a:	46 95       	lsr	r20
 54c:	37 95       	ror	r19
 54e:	27 95       	ror	r18
 550:	a7 95       	ror	r26
 552:	f0 40       	sbci	r31, 0x00	; 0
 554:	53 95       	inc	r21
 556:	c9 f7       	brne	.-14     	; 0x54a <__addsf3x+0x52>
 558:	7e f4       	brtc	.+30     	; 0x578 <__addsf3x+0x80>
 55a:	1f 16       	cp	r1, r31
 55c:	ba 0b       	sbc	r27, r26
 55e:	62 0b       	sbc	r22, r18
 560:	73 0b       	sbc	r23, r19
 562:	84 0b       	sbc	r24, r20
 564:	ba f0       	brmi	.+46     	; 0x594 <__addsf3x+0x9c>
 566:	91 50       	subi	r25, 0x01	; 1
 568:	a1 f0       	breq	.+40     	; 0x592 <__addsf3x+0x9a>
 56a:	ff 0f       	add	r31, r31
 56c:	bb 1f       	adc	r27, r27
 56e:	66 1f       	adc	r22, r22
 570:	77 1f       	adc	r23, r23
 572:	88 1f       	adc	r24, r24
 574:	c2 f7       	brpl	.-16     	; 0x566 <__addsf3x+0x6e>
 576:	0e c0       	rjmp	.+28     	; 0x594 <__addsf3x+0x9c>
 578:	ba 0f       	add	r27, r26
 57a:	62 1f       	adc	r22, r18
 57c:	73 1f       	adc	r23, r19
 57e:	84 1f       	adc	r24, r20
 580:	48 f4       	brcc	.+18     	; 0x594 <__addsf3x+0x9c>
 582:	87 95       	ror	r24
 584:	77 95       	ror	r23
 586:	67 95       	ror	r22
 588:	b7 95       	ror	r27
 58a:	f7 95       	ror	r31
 58c:	9e 3f       	cpi	r25, 0xFE	; 254
 58e:	08 f0       	brcs	.+2      	; 0x592 <__addsf3x+0x9a>
 590:	b0 cf       	rjmp	.-160    	; 0x4f2 <__addsf3+0x28>
 592:	93 95       	inc	r25
 594:	88 0f       	add	r24, r24
 596:	08 f0       	brcs	.+2      	; 0x59a <__addsf3x+0xa2>
 598:	99 27       	eor	r25, r25
 59a:	ee 0f       	add	r30, r30
 59c:	97 95       	ror	r25
 59e:	87 95       	ror	r24
 5a0:	08 95       	ret

000005a2 <__divsf3>:
 5a2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__divsf3x>
 5a6:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__fp_round>
 5aa:	0e 94 bf 03 	call	0x77e	; 0x77e <__fp_pscB>
 5ae:	58 f0       	brcs	.+22     	; 0x5c6 <__divsf3+0x24>
 5b0:	0e 94 b8 03 	call	0x770	; 0x770 <__fp_pscA>
 5b4:	40 f0       	brcs	.+16     	; 0x5c6 <__divsf3+0x24>
 5b6:	29 f4       	brne	.+10     	; 0x5c2 <__divsf3+0x20>
 5b8:	5f 3f       	cpi	r21, 0xFF	; 255
 5ba:	29 f0       	breq	.+10     	; 0x5c6 <__divsf3+0x24>
 5bc:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_inf>
 5c0:	51 11       	cpse	r21, r1
 5c2:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__fp_szero>
 5c6:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_nan>

000005ca <__divsf3x>:
 5ca:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fp_split3>
 5ce:	68 f3       	brcs	.-38     	; 0x5aa <__divsf3+0x8>

000005d0 <__divsf3_pse>:
 5d0:	99 23       	and	r25, r25
 5d2:	b1 f3       	breq	.-20     	; 0x5c0 <__divsf3+0x1e>
 5d4:	55 23       	and	r21, r21
 5d6:	91 f3       	breq	.-28     	; 0x5bc <__divsf3+0x1a>
 5d8:	95 1b       	sub	r25, r21
 5da:	55 0b       	sbc	r21, r21
 5dc:	bb 27       	eor	r27, r27
 5de:	aa 27       	eor	r26, r26
 5e0:	62 17       	cp	r22, r18
 5e2:	73 07       	cpc	r23, r19
 5e4:	84 07       	cpc	r24, r20
 5e6:	38 f0       	brcs	.+14     	; 0x5f6 <__divsf3_pse+0x26>
 5e8:	9f 5f       	subi	r25, 0xFF	; 255
 5ea:	5f 4f       	sbci	r21, 0xFF	; 255
 5ec:	22 0f       	add	r18, r18
 5ee:	33 1f       	adc	r19, r19
 5f0:	44 1f       	adc	r20, r20
 5f2:	aa 1f       	adc	r26, r26
 5f4:	a9 f3       	breq	.-22     	; 0x5e0 <__divsf3_pse+0x10>
 5f6:	35 d0       	rcall	.+106    	; 0x662 <__divsf3_pse+0x92>
 5f8:	0e 2e       	mov	r0, r30
 5fa:	3a f0       	brmi	.+14     	; 0x60a <__divsf3_pse+0x3a>
 5fc:	e0 e8       	ldi	r30, 0x80	; 128
 5fe:	32 d0       	rcall	.+100    	; 0x664 <__divsf3_pse+0x94>
 600:	91 50       	subi	r25, 0x01	; 1
 602:	50 40       	sbci	r21, 0x00	; 0
 604:	e6 95       	lsr	r30
 606:	00 1c       	adc	r0, r0
 608:	ca f7       	brpl	.-14     	; 0x5fc <__divsf3_pse+0x2c>
 60a:	2b d0       	rcall	.+86     	; 0x662 <__divsf3_pse+0x92>
 60c:	fe 2f       	mov	r31, r30
 60e:	29 d0       	rcall	.+82     	; 0x662 <__divsf3_pse+0x92>
 610:	66 0f       	add	r22, r22
 612:	77 1f       	adc	r23, r23
 614:	88 1f       	adc	r24, r24
 616:	bb 1f       	adc	r27, r27
 618:	26 17       	cp	r18, r22
 61a:	37 07       	cpc	r19, r23
 61c:	48 07       	cpc	r20, r24
 61e:	ab 07       	cpc	r26, r27
 620:	b0 e8       	ldi	r27, 0x80	; 128
 622:	09 f0       	breq	.+2      	; 0x626 <__divsf3_pse+0x56>
 624:	bb 0b       	sbc	r27, r27
 626:	80 2d       	mov	r24, r0
 628:	bf 01       	movw	r22, r30
 62a:	ff 27       	eor	r31, r31
 62c:	93 58       	subi	r25, 0x83	; 131
 62e:	5f 4f       	sbci	r21, 0xFF	; 255
 630:	3a f0       	brmi	.+14     	; 0x640 <__divsf3_pse+0x70>
 632:	9e 3f       	cpi	r25, 0xFE	; 254
 634:	51 05       	cpc	r21, r1
 636:	78 f0       	brcs	.+30     	; 0x656 <__divsf3_pse+0x86>
 638:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_inf>
 63c:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__fp_szero>
 640:	5f 3f       	cpi	r21, 0xFF	; 255
 642:	e4 f3       	brlt	.-8      	; 0x63c <__divsf3_pse+0x6c>
 644:	98 3e       	cpi	r25, 0xE8	; 232
 646:	d4 f3       	brlt	.-12     	; 0x63c <__divsf3_pse+0x6c>
 648:	86 95       	lsr	r24
 64a:	77 95       	ror	r23
 64c:	67 95       	ror	r22
 64e:	b7 95       	ror	r27
 650:	f7 95       	ror	r31
 652:	9f 5f       	subi	r25, 0xFF	; 255
 654:	c9 f7       	brne	.-14     	; 0x648 <__divsf3_pse+0x78>
 656:	88 0f       	add	r24, r24
 658:	91 1d       	adc	r25, r1
 65a:	96 95       	lsr	r25
 65c:	87 95       	ror	r24
 65e:	97 f9       	bld	r25, 7
 660:	08 95       	ret
 662:	e1 e0       	ldi	r30, 0x01	; 1
 664:	66 0f       	add	r22, r22
 666:	77 1f       	adc	r23, r23
 668:	88 1f       	adc	r24, r24
 66a:	bb 1f       	adc	r27, r27
 66c:	62 17       	cp	r22, r18
 66e:	73 07       	cpc	r23, r19
 670:	84 07       	cpc	r24, r20
 672:	ba 07       	cpc	r27, r26
 674:	20 f0       	brcs	.+8      	; 0x67e <__divsf3_pse+0xae>
 676:	62 1b       	sub	r22, r18
 678:	73 0b       	sbc	r23, r19
 67a:	84 0b       	sbc	r24, r20
 67c:	ba 0b       	sbc	r27, r26
 67e:	ee 1f       	adc	r30, r30
 680:	88 f7       	brcc	.-30     	; 0x664 <__divsf3_pse+0x94>
 682:	e0 95       	com	r30
 684:	08 95       	ret

00000686 <__fixunssfsi>:
 686:	0e 94 df 03 	call	0x7be	; 0x7be <__fp_splitA>
 68a:	88 f0       	brcs	.+34     	; 0x6ae <__fixunssfsi+0x28>
 68c:	9f 57       	subi	r25, 0x7F	; 127
 68e:	98 f0       	brcs	.+38     	; 0x6b6 <__fixunssfsi+0x30>
 690:	b9 2f       	mov	r27, r25
 692:	99 27       	eor	r25, r25
 694:	b7 51       	subi	r27, 0x17	; 23
 696:	b0 f0       	brcs	.+44     	; 0x6c4 <__fixunssfsi+0x3e>
 698:	e1 f0       	breq	.+56     	; 0x6d2 <__fixunssfsi+0x4c>
 69a:	66 0f       	add	r22, r22
 69c:	77 1f       	adc	r23, r23
 69e:	88 1f       	adc	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	1a f0       	brmi	.+6      	; 0x6aa <__fixunssfsi+0x24>
 6a4:	ba 95       	dec	r27
 6a6:	c9 f7       	brne	.-14     	; 0x69a <__fixunssfsi+0x14>
 6a8:	14 c0       	rjmp	.+40     	; 0x6d2 <__fixunssfsi+0x4c>
 6aa:	b1 30       	cpi	r27, 0x01	; 1
 6ac:	91 f0       	breq	.+36     	; 0x6d2 <__fixunssfsi+0x4c>
 6ae:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__fp_zero>
 6b2:	b1 e0       	ldi	r27, 0x01	; 1
 6b4:	08 95       	ret
 6b6:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__fp_zero>
 6ba:	67 2f       	mov	r22, r23
 6bc:	78 2f       	mov	r23, r24
 6be:	88 27       	eor	r24, r24
 6c0:	b8 5f       	subi	r27, 0xF8	; 248
 6c2:	39 f0       	breq	.+14     	; 0x6d2 <__fixunssfsi+0x4c>
 6c4:	b9 3f       	cpi	r27, 0xF9	; 249
 6c6:	cc f3       	brlt	.-14     	; 0x6ba <__fixunssfsi+0x34>
 6c8:	86 95       	lsr	r24
 6ca:	77 95       	ror	r23
 6cc:	67 95       	ror	r22
 6ce:	b3 95       	inc	r27
 6d0:	d9 f7       	brne	.-10     	; 0x6c8 <__fixunssfsi+0x42>
 6d2:	3e f4       	brtc	.+14     	; 0x6e2 <__fixunssfsi+0x5c>
 6d4:	90 95       	com	r25
 6d6:	80 95       	com	r24
 6d8:	70 95       	com	r23
 6da:	61 95       	neg	r22
 6dc:	7f 4f       	sbci	r23, 0xFF	; 255
 6de:	8f 4f       	sbci	r24, 0xFF	; 255
 6e0:	9f 4f       	sbci	r25, 0xFF	; 255
 6e2:	08 95       	ret

000006e4 <__floatunsisf>:
 6e4:	e8 94       	clt
 6e6:	09 c0       	rjmp	.+18     	; 0x6fa <__floatsisf+0x12>

000006e8 <__floatsisf>:
 6e8:	97 fb       	bst	r25, 7
 6ea:	3e f4       	brtc	.+14     	; 0x6fa <__floatsisf+0x12>
 6ec:	90 95       	com	r25
 6ee:	80 95       	com	r24
 6f0:	70 95       	com	r23
 6f2:	61 95       	neg	r22
 6f4:	7f 4f       	sbci	r23, 0xFF	; 255
 6f6:	8f 4f       	sbci	r24, 0xFF	; 255
 6f8:	9f 4f       	sbci	r25, 0xFF	; 255
 6fa:	99 23       	and	r25, r25
 6fc:	a9 f0       	breq	.+42     	; 0x728 <__floatsisf+0x40>
 6fe:	f9 2f       	mov	r31, r25
 700:	96 e9       	ldi	r25, 0x96	; 150
 702:	bb 27       	eor	r27, r27
 704:	93 95       	inc	r25
 706:	f6 95       	lsr	r31
 708:	87 95       	ror	r24
 70a:	77 95       	ror	r23
 70c:	67 95       	ror	r22
 70e:	b7 95       	ror	r27
 710:	f1 11       	cpse	r31, r1
 712:	f8 cf       	rjmp	.-16     	; 0x704 <__floatsisf+0x1c>
 714:	fa f4       	brpl	.+62     	; 0x754 <__floatsisf+0x6c>
 716:	bb 0f       	add	r27, r27
 718:	11 f4       	brne	.+4      	; 0x71e <__floatsisf+0x36>
 71a:	60 ff       	sbrs	r22, 0
 71c:	1b c0       	rjmp	.+54     	; 0x754 <__floatsisf+0x6c>
 71e:	6f 5f       	subi	r22, 0xFF	; 255
 720:	7f 4f       	sbci	r23, 0xFF	; 255
 722:	8f 4f       	sbci	r24, 0xFF	; 255
 724:	9f 4f       	sbci	r25, 0xFF	; 255
 726:	16 c0       	rjmp	.+44     	; 0x754 <__floatsisf+0x6c>
 728:	88 23       	and	r24, r24
 72a:	11 f0       	breq	.+4      	; 0x730 <__floatsisf+0x48>
 72c:	96 e9       	ldi	r25, 0x96	; 150
 72e:	11 c0       	rjmp	.+34     	; 0x752 <__floatsisf+0x6a>
 730:	77 23       	and	r23, r23
 732:	21 f0       	breq	.+8      	; 0x73c <__floatsisf+0x54>
 734:	9e e8       	ldi	r25, 0x8E	; 142
 736:	87 2f       	mov	r24, r23
 738:	76 2f       	mov	r23, r22
 73a:	05 c0       	rjmp	.+10     	; 0x746 <__floatsisf+0x5e>
 73c:	66 23       	and	r22, r22
 73e:	71 f0       	breq	.+28     	; 0x75c <__floatsisf+0x74>
 740:	96 e8       	ldi	r25, 0x86	; 134
 742:	86 2f       	mov	r24, r22
 744:	70 e0       	ldi	r23, 0x00	; 0
 746:	60 e0       	ldi	r22, 0x00	; 0
 748:	2a f0       	brmi	.+10     	; 0x754 <__floatsisf+0x6c>
 74a:	9a 95       	dec	r25
 74c:	66 0f       	add	r22, r22
 74e:	77 1f       	adc	r23, r23
 750:	88 1f       	adc	r24, r24
 752:	da f7       	brpl	.-10     	; 0x74a <__floatsisf+0x62>
 754:	88 0f       	add	r24, r24
 756:	96 95       	lsr	r25
 758:	87 95       	ror	r24
 75a:	97 f9       	bld	r25, 7
 75c:	08 95       	ret

0000075e <__fp_inf>:
 75e:	97 f9       	bld	r25, 7
 760:	9f 67       	ori	r25, 0x7F	; 127
 762:	80 e8       	ldi	r24, 0x80	; 128
 764:	70 e0       	ldi	r23, 0x00	; 0
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	08 95       	ret

0000076a <__fp_nan>:
 76a:	9f ef       	ldi	r25, 0xFF	; 255
 76c:	80 ec       	ldi	r24, 0xC0	; 192
 76e:	08 95       	ret

00000770 <__fp_pscA>:
 770:	00 24       	eor	r0, r0
 772:	0a 94       	dec	r0
 774:	16 16       	cp	r1, r22
 776:	17 06       	cpc	r1, r23
 778:	18 06       	cpc	r1, r24
 77a:	09 06       	cpc	r0, r25
 77c:	08 95       	ret

0000077e <__fp_pscB>:
 77e:	00 24       	eor	r0, r0
 780:	0a 94       	dec	r0
 782:	12 16       	cp	r1, r18
 784:	13 06       	cpc	r1, r19
 786:	14 06       	cpc	r1, r20
 788:	05 06       	cpc	r0, r21
 78a:	08 95       	ret

0000078c <__fp_round>:
 78c:	09 2e       	mov	r0, r25
 78e:	03 94       	inc	r0
 790:	00 0c       	add	r0, r0
 792:	11 f4       	brne	.+4      	; 0x798 <__fp_round+0xc>
 794:	88 23       	and	r24, r24
 796:	52 f0       	brmi	.+20     	; 0x7ac <__fp_round+0x20>
 798:	bb 0f       	add	r27, r27
 79a:	40 f4       	brcc	.+16     	; 0x7ac <__fp_round+0x20>
 79c:	bf 2b       	or	r27, r31
 79e:	11 f4       	brne	.+4      	; 0x7a4 <__fp_round+0x18>
 7a0:	60 ff       	sbrs	r22, 0
 7a2:	04 c0       	rjmp	.+8      	; 0x7ac <__fp_round+0x20>
 7a4:	6f 5f       	subi	r22, 0xFF	; 255
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255
 7a8:	8f 4f       	sbci	r24, 0xFF	; 255
 7aa:	9f 4f       	sbci	r25, 0xFF	; 255
 7ac:	08 95       	ret

000007ae <__fp_split3>:
 7ae:	57 fd       	sbrc	r21, 7
 7b0:	90 58       	subi	r25, 0x80	; 128
 7b2:	44 0f       	add	r20, r20
 7b4:	55 1f       	adc	r21, r21
 7b6:	59 f0       	breq	.+22     	; 0x7ce <__fp_splitA+0x10>
 7b8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ba:	71 f0       	breq	.+28     	; 0x7d8 <__fp_splitA+0x1a>
 7bc:	47 95       	ror	r20

000007be <__fp_splitA>:
 7be:	88 0f       	add	r24, r24
 7c0:	97 fb       	bst	r25, 7
 7c2:	99 1f       	adc	r25, r25
 7c4:	61 f0       	breq	.+24     	; 0x7de <__fp_splitA+0x20>
 7c6:	9f 3f       	cpi	r25, 0xFF	; 255
 7c8:	79 f0       	breq	.+30     	; 0x7e8 <__fp_splitA+0x2a>
 7ca:	87 95       	ror	r24
 7cc:	08 95       	ret
 7ce:	12 16       	cp	r1, r18
 7d0:	13 06       	cpc	r1, r19
 7d2:	14 06       	cpc	r1, r20
 7d4:	55 1f       	adc	r21, r21
 7d6:	f2 cf       	rjmp	.-28     	; 0x7bc <__fp_split3+0xe>
 7d8:	46 95       	lsr	r20
 7da:	f1 df       	rcall	.-30     	; 0x7be <__fp_splitA>
 7dc:	08 c0       	rjmp	.+16     	; 0x7ee <__fp_splitA+0x30>
 7de:	16 16       	cp	r1, r22
 7e0:	17 06       	cpc	r1, r23
 7e2:	18 06       	cpc	r1, r24
 7e4:	99 1f       	adc	r25, r25
 7e6:	f1 cf       	rjmp	.-30     	; 0x7ca <__fp_splitA+0xc>
 7e8:	86 95       	lsr	r24
 7ea:	71 05       	cpc	r23, r1
 7ec:	61 05       	cpc	r22, r1
 7ee:	08 94       	sec
 7f0:	08 95       	ret

000007f2 <__fp_zero>:
 7f2:	e8 94       	clt

000007f4 <__fp_szero>:
 7f4:	bb 27       	eor	r27, r27
 7f6:	66 27       	eor	r22, r22
 7f8:	77 27       	eor	r23, r23
 7fa:	cb 01       	movw	r24, r22
 7fc:	97 f9       	bld	r25, 7
 7fe:	08 95       	ret

00000800 <__mulsf3>:
 800:	0e 94 13 04 	call	0x826	; 0x826 <__mulsf3x>
 804:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__fp_round>
 808:	0e 94 b8 03 	call	0x770	; 0x770 <__fp_pscA>
 80c:	38 f0       	brcs	.+14     	; 0x81c <__mulsf3+0x1c>
 80e:	0e 94 bf 03 	call	0x77e	; 0x77e <__fp_pscB>
 812:	20 f0       	brcs	.+8      	; 0x81c <__mulsf3+0x1c>
 814:	95 23       	and	r25, r21
 816:	11 f0       	breq	.+4      	; 0x81c <__mulsf3+0x1c>
 818:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_inf>
 81c:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_nan>
 820:	11 24       	eor	r1, r1
 822:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__fp_szero>

00000826 <__mulsf3x>:
 826:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fp_split3>
 82a:	70 f3       	brcs	.-36     	; 0x808 <__mulsf3+0x8>

0000082c <__mulsf3_pse>:
 82c:	95 9f       	mul	r25, r21
 82e:	c1 f3       	breq	.-16     	; 0x820 <__mulsf3+0x20>
 830:	95 0f       	add	r25, r21
 832:	50 e0       	ldi	r21, 0x00	; 0
 834:	55 1f       	adc	r21, r21
 836:	62 9f       	mul	r22, r18
 838:	f0 01       	movw	r30, r0
 83a:	72 9f       	mul	r23, r18
 83c:	bb 27       	eor	r27, r27
 83e:	f0 0d       	add	r31, r0
 840:	b1 1d       	adc	r27, r1
 842:	63 9f       	mul	r22, r19
 844:	aa 27       	eor	r26, r26
 846:	f0 0d       	add	r31, r0
 848:	b1 1d       	adc	r27, r1
 84a:	aa 1f       	adc	r26, r26
 84c:	64 9f       	mul	r22, r20
 84e:	66 27       	eor	r22, r22
 850:	b0 0d       	add	r27, r0
 852:	a1 1d       	adc	r26, r1
 854:	66 1f       	adc	r22, r22
 856:	82 9f       	mul	r24, r18
 858:	22 27       	eor	r18, r18
 85a:	b0 0d       	add	r27, r0
 85c:	a1 1d       	adc	r26, r1
 85e:	62 1f       	adc	r22, r18
 860:	73 9f       	mul	r23, r19
 862:	b0 0d       	add	r27, r0
 864:	a1 1d       	adc	r26, r1
 866:	62 1f       	adc	r22, r18
 868:	83 9f       	mul	r24, r19
 86a:	a0 0d       	add	r26, r0
 86c:	61 1d       	adc	r22, r1
 86e:	22 1f       	adc	r18, r18
 870:	74 9f       	mul	r23, r20
 872:	33 27       	eor	r19, r19
 874:	a0 0d       	add	r26, r0
 876:	61 1d       	adc	r22, r1
 878:	23 1f       	adc	r18, r19
 87a:	84 9f       	mul	r24, r20
 87c:	60 0d       	add	r22, r0
 87e:	21 1d       	adc	r18, r1
 880:	82 2f       	mov	r24, r18
 882:	76 2f       	mov	r23, r22
 884:	6a 2f       	mov	r22, r26
 886:	11 24       	eor	r1, r1
 888:	9f 57       	subi	r25, 0x7F	; 127
 88a:	50 40       	sbci	r21, 0x00	; 0
 88c:	9a f0       	brmi	.+38     	; 0x8b4 <__mulsf3_pse+0x88>
 88e:	f1 f0       	breq	.+60     	; 0x8cc <__mulsf3_pse+0xa0>
 890:	88 23       	and	r24, r24
 892:	4a f0       	brmi	.+18     	; 0x8a6 <__mulsf3_pse+0x7a>
 894:	ee 0f       	add	r30, r30
 896:	ff 1f       	adc	r31, r31
 898:	bb 1f       	adc	r27, r27
 89a:	66 1f       	adc	r22, r22
 89c:	77 1f       	adc	r23, r23
 89e:	88 1f       	adc	r24, r24
 8a0:	91 50       	subi	r25, 0x01	; 1
 8a2:	50 40       	sbci	r21, 0x00	; 0
 8a4:	a9 f7       	brne	.-22     	; 0x890 <__mulsf3_pse+0x64>
 8a6:	9e 3f       	cpi	r25, 0xFE	; 254
 8a8:	51 05       	cpc	r21, r1
 8aa:	80 f0       	brcs	.+32     	; 0x8cc <__mulsf3_pse+0xa0>
 8ac:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_inf>
 8b0:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__fp_szero>
 8b4:	5f 3f       	cpi	r21, 0xFF	; 255
 8b6:	e4 f3       	brlt	.-8      	; 0x8b0 <__mulsf3_pse+0x84>
 8b8:	98 3e       	cpi	r25, 0xE8	; 232
 8ba:	d4 f3       	brlt	.-12     	; 0x8b0 <__mulsf3_pse+0x84>
 8bc:	86 95       	lsr	r24
 8be:	77 95       	ror	r23
 8c0:	67 95       	ror	r22
 8c2:	b7 95       	ror	r27
 8c4:	f7 95       	ror	r31
 8c6:	e7 95       	ror	r30
 8c8:	9f 5f       	subi	r25, 0xFF	; 255
 8ca:	c1 f7       	brne	.-16     	; 0x8bc <__mulsf3_pse+0x90>
 8cc:	fe 2b       	or	r31, r30
 8ce:	88 0f       	add	r24, r24
 8d0:	91 1d       	adc	r25, r1
 8d2:	96 95       	lsr	r25
 8d4:	87 95       	ror	r24
 8d6:	97 f9       	bld	r25, 7
 8d8:	08 95       	ret

000008da <_exit>:
 8da:	f8 94       	cli

000008dc <__stop_program>:
 8dc:	ff cf       	rjmp	.-2      	; 0x8dc <__stop_program>
