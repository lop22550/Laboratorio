
Proyecto 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000764  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000764  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000794  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000951  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076c  00000000  00000000  000011b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000581  00000000  00000000  00001921  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045d  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b0  00000000  00000000  000023cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000247d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 46 01 	call	0x28c	; 0x28c <main>
  88:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initPWM1>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdint.h>

void initPWM1(void){
	DDRB |= (1<<PORTB1);	//Se está configurando el puerto OC1A como salida
  90:	84 b1       	in	r24, 0x04	; 4
  92:	82 60       	ori	r24, 0x02	; 2
  94:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<PORTB2);	//Se está configurando el puerto OC1B como salida
  96:	84 b1       	in	r24, 0x04	; 4
  98:	84 60       	ori	r24, 0x04	; 4
  9a:	84 b9       	out	0x04, r24	; 4
	
	TCCR1A = 0;
  9c:	a0 e8       	ldi	r26, 0x80	; 128
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	1c 92       	st	X, r1
	TCCR1B = 0;
  a2:	e1 e8       	ldi	r30, 0x81	; 129
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	10 82       	st	Z, r1
	
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11); // Configurando OC1A y OC1B como No invertido| Configurando Modo Fast PWM con ICR1 como TOP
  a8:	8c 91       	ld	r24, X
  aa:	82 6a       	ori	r24, 0xA2	; 162
  ac:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM13)|(1<<WGM12)|(1<<CS12)|(1<<CS10); //Configurando Modo Fast PWM con ICR1 como TOP | Prescaler de 1024
  ae:	80 81       	ld	r24, Z
  b0:	8d 61       	ori	r24, 0x1D	; 29
  b2:	80 83       	st	Z, r24
	
	ICR1H = (PWM_TOP & 0xFF00)>>8;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = (PWM_TOP & 0x00FF);
  ba:	87 e3       	ldi	r24, 0x37	; 55
  bc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

	OCR1AH =(MIN1 & 0xFF00)>>8;
  c0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = (MIN1 & 0x00FF);
  c4:	89 e0       	ldi	r24, 0x09	; 9
  c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  ca:	08 95       	ret

000000cc <updateDutyCycle1A>:
}

uint8_t updateDutyCycle1A(uint8_t duty1){
	return (uint8_t)(((float)duty1/255)*(MAX1 - MIN1) + MIN1);
  cc:	68 2f       	mov	r22, r24
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__floatunsisf>
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	4f e7       	ldi	r20, 0x7F	; 127
  de:	53 e4       	ldi	r21, 0x43	; 67
  e0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__divsf3>
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	48 ea       	ldi	r20, 0xA8	; 168
  ea:	51 e4       	ldi	r21, 0x41	; 65
  ec:	0e 94 09 03 	call	0x612	; 0x612 <__mulsf3>
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	40 e1       	ldi	r20, 0x10	; 16
  f6:	51 e4       	ldi	r21, 0x41	; 65
  f8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__addsf3>
  fc:	0e 94 4c 02 	call	0x498	; 0x498 <__fixunssfsi>
 100:	86 2f       	mov	r24, r22
}
 102:	08 95       	ret

00000104 <initPWM2>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdint.h>

void initPWM2(void){
	DDRB |= (1<<DDB3);	//Se está configurando el puerto OC1A como salida
 104:	84 b1       	in	r24, 0x04	; 4
 106:	88 60       	ori	r24, 0x08	; 8
 108:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<DDD3);
 10a:	8a b1       	in	r24, 0x0a	; 10
 10c:	88 60       	ori	r24, 0x08	; 8
 10e:	8a b9       	out	0x0a, r24	; 10
	
	TCCR2A = 0;
 110:	e0 eb       	ldi	r30, 0xB0	; 176
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	10 82       	st	Z, r1
	TCCR2B = 0;
 116:	a1 eb       	ldi	r26, 0xB1	; 177
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	1c 92       	st	X, r1
	
	TCCR2A |= (1<<COM2A1); // Configurando OC1A como No invertido
 11c:	80 81       	ld	r24, Z
 11e:	80 68       	ori	r24, 0x80	; 128
 120:	80 83       	st	Z, r24
	TCCR2A |= (1<<WGM21)|(1<<WGM20); //Configurando Modo Fast PWM OCR2A
 122:	80 81       	ld	r24, Z
 124:	83 60       	ori	r24, 0x03	; 3
 126:	80 83       	st	Z, r24
	TCCR2B |= (1<<WGM22)|(1<<CS22)|(1<<CS21)|(1<<CS20); //Configurando Modo Fast PWM OCR2A | Prescaler de 1024
 128:	8c 91       	ld	r24, X
 12a:	8f 60       	ori	r24, 0x0F	; 15
 12c:	8c 93       	st	X, r24

	OCR2A = (MIN2 & 0xFF);
 12e:	89 e0       	ldi	r24, 0x09	; 9
 130:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = (MIN2 & 0xFF);
 134:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 138:	08 95       	ret

0000013a <updateDutyCycle2A>:
}

uint8_t updateDutyCycle2A(uint8_t duty3){
	return (uint8_t)(((float)duty3/6));
 13a:	68 2f       	mov	r22, r24
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__floatunsisf>
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	40 ec       	ldi	r20, 0xC0	; 192
 14c:	50 e4       	ldi	r21, 0x40	; 64
 14e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__divsf3>
 152:	0e 94 4c 02 	call	0x498	; 0x498 <__fixunssfsi>
 156:	86 2f       	mov	r24, r22

}
 158:	08 95       	ret

0000015a <updateDutyCycle2B>:
uint8_t updateDutyCycle2B(uint8_t duty4){
		return (uint8_t)(((float)duty4/6));
 15a:	68 2f       	mov	r22, r24
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__floatunsisf>
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	40 ec       	ldi	r20, 0xC0	; 192
 16c:	50 e4       	ldi	r21, 0x40	; 64
 16e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__divsf3>
 172:	0e 94 4c 02 	call	0x498	; 0x498 <__fixunssfsi>
 176:	86 2f       	mov	r24, r22

 178:	08 95       	ret

0000017a <InitADC>:
		OCR2B = updateDutyCycle2B(valor_ADC4);
    }
}

void InitADC(void){
	ADCSRA = 0;
 17a:	aa e7       	ldi	r26, 0x7A	; 122
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	1c 92       	st	X, r1
	ADMUX = 0; 
 180:	ec e7       	ldi	r30, 0x7C	; 124
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	10 82       	st	Z, r1
	ADMUX |= (1<<ADLAR); //AJUSTE A LA IZQUIERDA (SOLO SE USA ADCH)
 186:	80 81       	ld	r24, Z
 188:	80 62       	ori	r24, 0x20	; 32
 18a:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //Selecciona un voltaje interno de referencia de 5V.
 18c:	80 81       	ld	r24, Z
 18e:	80 64       	ori	r24, 0x40	; 64
 190:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
 192:	80 81       	ld	r24, Z
 194:	8f 77       	andi	r24, 0x7F	; 127
 196:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Enciente ADC | Prescaler de 128 (125kHZ)
 198:	8c 91       	ld	r24, X
 19a:	87 68       	ori	r24, 0x87	; 135
 19c:	8c 93       	st	X, r24
	//ADCSRA |= (1<<ADIE) //Interrupción ADC
	//Deshabilita la entrada digital PC5
	DIDR0 |= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D)|(1<<ADC3D);
 19e:	ee e7       	ldi	r30, 0x7E	; 126
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	8f 60       	ori	r24, 0x0F	; 15
 1a6:	80 83       	st	Z, r24
 1a8:	08 95       	ret

000001aa <checkADC>:
} 

void checkADC(void){
	
	switch(Cambio){
 1aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	e9 f0       	breq	.+58     	; 0x1ec <checkADC+0x42>
 1b2:	30 f0       	brcs	.+12     	; 0x1c0 <checkADC+0x16>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	99 f1       	breq	.+102    	; 0x21e <checkADC+0x74>
 1b8:	83 30       	cpi	r24, 0x03	; 3
 1ba:	09 f4       	brne	.+2      	; 0x1be <checkADC+0x14>
 1bc:	4c c0       	rjmp	.+152    	; 0x256 <checkADC+0xac>
 1be:	08 95       	ret
		case 0:
			while (ADCSRA & (1<<ADSC));
 1c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1c4:	86 fd       	sbrc	r24, 6
 1c6:	fc cf       	rjmp	.-8      	; 0x1c0 <checkADC+0x16>
			Cambio = 1; 
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));
 1ce:	ec e7       	ldi	r30, 0x7C	; 124
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	88 7f       	andi	r24, 0xF8	; 248
 1d6:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
 1d8:	ea e7       	ldi	r30, 0x7A	; 122
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	80 64       	ori	r24, 0x40	; 64
 1e0:	80 83       	st	Z, r24
			valor_ADC1 = ADCH;
 1e2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1e6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <valor_ADC1>
			break;
 1ea:	08 95       	ret
			
		case 1:
			while (ADCSRA & (1<<ADSC));
 1ec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1f0:	86 fd       	sbrc	r24, 6
 1f2:	fc cf       	rjmp	.-8      	; 0x1ec <checkADC+0x42>
			Cambio = 2; 
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));
 1fa:	ec e7       	ldi	r30, 0x7C	; 124
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	88 7f       	andi	r24, 0xF8	; 248
 202:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX0);
 204:	80 81       	ld	r24, Z
 206:	81 60       	ori	r24, 0x01	; 1
 208:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
 20a:	ea e7       	ldi	r30, 0x7A	; 122
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	80 64       	ori	r24, 0x40	; 64
 212:	80 83       	st	Z, r24
			valor_ADC2 = ADCH;
 214:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 218:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <valor_ADC2>
			break;
 21c:	08 95       	ret
		
		case 2: 
			while (ADCSRA & (1<<ADSC));
 21e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 222:	86 fd       	sbrc	r24, 6
 224:	fc cf       	rjmp	.-8      	; 0x21e <checkADC+0x74>
			Cambio = 3; 
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));
 22c:	ec e7       	ldi	r30, 0x7C	; 124
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	88 7f       	andi	r24, 0xF8	; 248
 234:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX1);
 236:	80 81       	ld	r24, Z
 238:	82 60       	ori	r24, 0x02	; 2
 23a:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX0);
 23c:	80 81       	ld	r24, Z
 23e:	81 60       	ori	r24, 0x01	; 1
 240:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
 242:	ea e7       	ldi	r30, 0x7A	; 122
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	80 64       	ori	r24, 0x40	; 64
 24a:	80 83       	st	Z, r24
			valor_ADC3 = ADCH;
 24c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 250:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <valor_ADC3>
			break;
 254:	08 95       	ret
			
		case 3: 
			while (ADCSRA & (1<<ADSC));
 256:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 25a:	86 fd       	sbrc	r24, 6
 25c:	fc cf       	rjmp	.-8      	; 0x256 <checkADC+0xac>
			Cambio = 0; 
 25e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));
 262:	ec e7       	ldi	r30, 0x7C	; 124
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	88 7f       	andi	r24, 0xF8	; 248
 26a:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX1)|(1<<MUX0);
 26c:	80 81       	ld	r24, Z
 26e:	83 60       	ori	r24, 0x03	; 3
 270:	80 83       	st	Z, r24
			ADMUX |= (1<<MUX0);
 272:	80 81       	ld	r24, Z
 274:	81 60       	ori	r24, 0x01	; 1
 276:	80 83       	st	Z, r24
			ADCSRA |= (1<<ADSC);
 278:	ea e7       	ldi	r30, 0x7A	; 122
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	80 64       	ori	r24, 0x40	; 64
 280:	80 83       	st	Z, r24
			valor_ADC4 = ADCH;
 282:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 286:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <valor_ADC4>
 28a:	08 95       	ret

0000028c <main>:
void checkADC (void);


int main(void)
{
	InitADC(); 
 28c:	0e 94 bd 00 	call	0x17a	; 0x17a <InitADC>
	initPWM1();
 290:	0e 94 48 00 	call	0x90	; 0x90 <initPWM1>
	initPWM2();
 294:	0e 94 82 00 	call	0x104	; 0x104 <initPWM2>
    
    while (1) 
    {
		checkADC();
 298:	0e 94 d5 00 	call	0x1aa	; 0x1aa <checkADC>
		OCR1A = updateDutyCycle1A(valor_ADC1); 
 29c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <valor_ADC1>
 2a0:	0e 94 66 00 	call	0xcc	; 0xcc <updateDutyCycle1A>
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2aa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = updateDutyCycle1A(valor_ADC2); 
 2ae:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <valor_ADC2>
 2b2:	0e 94 66 00 	call	0xcc	; 0xcc <updateDutyCycle1A>
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2bc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		OCR2A = updateDutyCycle2A(valor_ADC3);
 2c0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <valor_ADC3>
 2c4:	0e 94 9d 00 	call	0x13a	; 0x13a <updateDutyCycle2A>
 2c8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
		OCR2B = updateDutyCycle2B(valor_ADC4);
 2cc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <valor_ADC4>
 2d0:	0e 94 ad 00 	call	0x15a	; 0x15a <updateDutyCycle2B>
 2d4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 2d8:	df cf       	rjmp	.-66     	; 0x298 <main+0xc>

000002da <__subsf3>:
 2da:	50 58       	subi	r21, 0x80	; 128

000002dc <__addsf3>:
 2dc:	bb 27       	eor	r27, r27
 2de:	aa 27       	eor	r26, r26
 2e0:	0e 94 85 01 	call	0x30a	; 0x30a <__addsf3x>
 2e4:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_round>
 2e8:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_pscA>
 2ec:	38 f0       	brcs	.+14     	; 0x2fc <__addsf3+0x20>
 2ee:	0e 94 c8 02 	call	0x590	; 0x590 <__fp_pscB>
 2f2:	20 f0       	brcs	.+8      	; 0x2fc <__addsf3+0x20>
 2f4:	39 f4       	brne	.+14     	; 0x304 <__addsf3+0x28>
 2f6:	9f 3f       	cpi	r25, 0xFF	; 255
 2f8:	19 f4       	brne	.+6      	; 0x300 <__addsf3+0x24>
 2fa:	26 f4       	brtc	.+8      	; 0x304 <__addsf3+0x28>
 2fc:	0c 94 be 02 	jmp	0x57c	; 0x57c <__fp_nan>
 300:	0e f4       	brtc	.+2      	; 0x304 <__addsf3+0x28>
 302:	e0 95       	com	r30
 304:	e7 fb       	bst	r30, 7
 306:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_inf>

0000030a <__addsf3x>:
 30a:	e9 2f       	mov	r30, r25
 30c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_split3>
 310:	58 f3       	brcs	.-42     	; 0x2e8 <__addsf3+0xc>
 312:	ba 17       	cp	r27, r26
 314:	62 07       	cpc	r22, r18
 316:	73 07       	cpc	r23, r19
 318:	84 07       	cpc	r24, r20
 31a:	95 07       	cpc	r25, r21
 31c:	20 f0       	brcs	.+8      	; 0x326 <__addsf3x+0x1c>
 31e:	79 f4       	brne	.+30     	; 0x33e <__addsf3x+0x34>
 320:	a6 f5       	brtc	.+104    	; 0x38a <__addsf3x+0x80>
 322:	0c 94 02 03 	jmp	0x604	; 0x604 <__fp_zero>
 326:	0e f4       	brtc	.+2      	; 0x32a <__addsf3x+0x20>
 328:	e0 95       	com	r30
 32a:	0b 2e       	mov	r0, r27
 32c:	ba 2f       	mov	r27, r26
 32e:	a0 2d       	mov	r26, r0
 330:	0b 01       	movw	r0, r22
 332:	b9 01       	movw	r22, r18
 334:	90 01       	movw	r18, r0
 336:	0c 01       	movw	r0, r24
 338:	ca 01       	movw	r24, r20
 33a:	a0 01       	movw	r20, r0
 33c:	11 24       	eor	r1, r1
 33e:	ff 27       	eor	r31, r31
 340:	59 1b       	sub	r21, r25
 342:	99 f0       	breq	.+38     	; 0x36a <__addsf3x+0x60>
 344:	59 3f       	cpi	r21, 0xF9	; 249
 346:	50 f4       	brcc	.+20     	; 0x35c <__addsf3x+0x52>
 348:	50 3e       	cpi	r21, 0xE0	; 224
 34a:	68 f1       	brcs	.+90     	; 0x3a6 <__addsf3x+0x9c>
 34c:	1a 16       	cp	r1, r26
 34e:	f0 40       	sbci	r31, 0x00	; 0
 350:	a2 2f       	mov	r26, r18
 352:	23 2f       	mov	r18, r19
 354:	34 2f       	mov	r19, r20
 356:	44 27       	eor	r20, r20
 358:	58 5f       	subi	r21, 0xF8	; 248
 35a:	f3 cf       	rjmp	.-26     	; 0x342 <__addsf3x+0x38>
 35c:	46 95       	lsr	r20
 35e:	37 95       	ror	r19
 360:	27 95       	ror	r18
 362:	a7 95       	ror	r26
 364:	f0 40       	sbci	r31, 0x00	; 0
 366:	53 95       	inc	r21
 368:	c9 f7       	brne	.-14     	; 0x35c <__addsf3x+0x52>
 36a:	7e f4       	brtc	.+30     	; 0x38a <__addsf3x+0x80>
 36c:	1f 16       	cp	r1, r31
 36e:	ba 0b       	sbc	r27, r26
 370:	62 0b       	sbc	r22, r18
 372:	73 0b       	sbc	r23, r19
 374:	84 0b       	sbc	r24, r20
 376:	ba f0       	brmi	.+46     	; 0x3a6 <__addsf3x+0x9c>
 378:	91 50       	subi	r25, 0x01	; 1
 37a:	a1 f0       	breq	.+40     	; 0x3a4 <__addsf3x+0x9a>
 37c:	ff 0f       	add	r31, r31
 37e:	bb 1f       	adc	r27, r27
 380:	66 1f       	adc	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	88 1f       	adc	r24, r24
 386:	c2 f7       	brpl	.-16     	; 0x378 <__addsf3x+0x6e>
 388:	0e c0       	rjmp	.+28     	; 0x3a6 <__addsf3x+0x9c>
 38a:	ba 0f       	add	r27, r26
 38c:	62 1f       	adc	r22, r18
 38e:	73 1f       	adc	r23, r19
 390:	84 1f       	adc	r24, r20
 392:	48 f4       	brcc	.+18     	; 0x3a6 <__addsf3x+0x9c>
 394:	87 95       	ror	r24
 396:	77 95       	ror	r23
 398:	67 95       	ror	r22
 39a:	b7 95       	ror	r27
 39c:	f7 95       	ror	r31
 39e:	9e 3f       	cpi	r25, 0xFE	; 254
 3a0:	08 f0       	brcs	.+2      	; 0x3a4 <__addsf3x+0x9a>
 3a2:	b0 cf       	rjmp	.-160    	; 0x304 <__addsf3+0x28>
 3a4:	93 95       	inc	r25
 3a6:	88 0f       	add	r24, r24
 3a8:	08 f0       	brcs	.+2      	; 0x3ac <__addsf3x+0xa2>
 3aa:	99 27       	eor	r25, r25
 3ac:	ee 0f       	add	r30, r30
 3ae:	97 95       	ror	r25
 3b0:	87 95       	ror	r24
 3b2:	08 95       	ret

000003b4 <__divsf3>:
 3b4:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__divsf3x>
 3b8:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_round>
 3bc:	0e 94 c8 02 	call	0x590	; 0x590 <__fp_pscB>
 3c0:	58 f0       	brcs	.+22     	; 0x3d8 <__divsf3+0x24>
 3c2:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_pscA>
 3c6:	40 f0       	brcs	.+16     	; 0x3d8 <__divsf3+0x24>
 3c8:	29 f4       	brne	.+10     	; 0x3d4 <__divsf3+0x20>
 3ca:	5f 3f       	cpi	r21, 0xFF	; 255
 3cc:	29 f0       	breq	.+10     	; 0x3d8 <__divsf3+0x24>
 3ce:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_inf>
 3d2:	51 11       	cpse	r21, r1
 3d4:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_szero>
 3d8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__fp_nan>

000003dc <__divsf3x>:
 3dc:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_split3>
 3e0:	68 f3       	brcs	.-38     	; 0x3bc <__divsf3+0x8>

000003e2 <__divsf3_pse>:
 3e2:	99 23       	and	r25, r25
 3e4:	b1 f3       	breq	.-20     	; 0x3d2 <__divsf3+0x1e>
 3e6:	55 23       	and	r21, r21
 3e8:	91 f3       	breq	.-28     	; 0x3ce <__divsf3+0x1a>
 3ea:	95 1b       	sub	r25, r21
 3ec:	55 0b       	sbc	r21, r21
 3ee:	bb 27       	eor	r27, r27
 3f0:	aa 27       	eor	r26, r26
 3f2:	62 17       	cp	r22, r18
 3f4:	73 07       	cpc	r23, r19
 3f6:	84 07       	cpc	r24, r20
 3f8:	38 f0       	brcs	.+14     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3fa:	9f 5f       	subi	r25, 0xFF	; 255
 3fc:	5f 4f       	sbci	r21, 0xFF	; 255
 3fe:	22 0f       	add	r18, r18
 400:	33 1f       	adc	r19, r19
 402:	44 1f       	adc	r20, r20
 404:	aa 1f       	adc	r26, r26
 406:	a9 f3       	breq	.-22     	; 0x3f2 <__divsf3_pse+0x10>
 408:	35 d0       	rcall	.+106    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 40a:	0e 2e       	mov	r0, r30
 40c:	3a f0       	brmi	.+14     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 40e:	e0 e8       	ldi	r30, 0x80	; 128
 410:	32 d0       	rcall	.+100    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 412:	91 50       	subi	r25, 0x01	; 1
 414:	50 40       	sbci	r21, 0x00	; 0
 416:	e6 95       	lsr	r30
 418:	00 1c       	adc	r0, r0
 41a:	ca f7       	brpl	.-14     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 41c:	2b d0       	rcall	.+86     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 41e:	fe 2f       	mov	r31, r30
 420:	29 d0       	rcall	.+82     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 422:	66 0f       	add	r22, r22
 424:	77 1f       	adc	r23, r23
 426:	88 1f       	adc	r24, r24
 428:	bb 1f       	adc	r27, r27
 42a:	26 17       	cp	r18, r22
 42c:	37 07       	cpc	r19, r23
 42e:	48 07       	cpc	r20, r24
 430:	ab 07       	cpc	r26, r27
 432:	b0 e8       	ldi	r27, 0x80	; 128
 434:	09 f0       	breq	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 436:	bb 0b       	sbc	r27, r27
 438:	80 2d       	mov	r24, r0
 43a:	bf 01       	movw	r22, r30
 43c:	ff 27       	eor	r31, r31
 43e:	93 58       	subi	r25, 0x83	; 131
 440:	5f 4f       	sbci	r21, 0xFF	; 255
 442:	3a f0       	brmi	.+14     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 444:	9e 3f       	cpi	r25, 0xFE	; 254
 446:	51 05       	cpc	r21, r1
 448:	78 f0       	brcs	.+30     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 44a:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_inf>
 44e:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_szero>
 452:	5f 3f       	cpi	r21, 0xFF	; 255
 454:	e4 f3       	brlt	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 456:	98 3e       	cpi	r25, 0xE8	; 232
 458:	d4 f3       	brlt	.-12     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 45a:	86 95       	lsr	r24
 45c:	77 95       	ror	r23
 45e:	67 95       	ror	r22
 460:	b7 95       	ror	r27
 462:	f7 95       	ror	r31
 464:	9f 5f       	subi	r25, 0xFF	; 255
 466:	c9 f7       	brne	.-14     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 468:	88 0f       	add	r24, r24
 46a:	91 1d       	adc	r25, r1
 46c:	96 95       	lsr	r25
 46e:	87 95       	ror	r24
 470:	97 f9       	bld	r25, 7
 472:	08 95       	ret
 474:	e1 e0       	ldi	r30, 0x01	; 1
 476:	66 0f       	add	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	88 1f       	adc	r24, r24
 47c:	bb 1f       	adc	r27, r27
 47e:	62 17       	cp	r22, r18
 480:	73 07       	cpc	r23, r19
 482:	84 07       	cpc	r24, r20
 484:	ba 07       	cpc	r27, r26
 486:	20 f0       	brcs	.+8      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 488:	62 1b       	sub	r22, r18
 48a:	73 0b       	sbc	r23, r19
 48c:	84 0b       	sbc	r24, r20
 48e:	ba 0b       	sbc	r27, r26
 490:	ee 1f       	adc	r30, r30
 492:	88 f7       	brcc	.-30     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 494:	e0 95       	com	r30
 496:	08 95       	ret

00000498 <__fixunssfsi>:
 498:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__fp_splitA>
 49c:	88 f0       	brcs	.+34     	; 0x4c0 <__fixunssfsi+0x28>
 49e:	9f 57       	subi	r25, 0x7F	; 127
 4a0:	98 f0       	brcs	.+38     	; 0x4c8 <__fixunssfsi+0x30>
 4a2:	b9 2f       	mov	r27, r25
 4a4:	99 27       	eor	r25, r25
 4a6:	b7 51       	subi	r27, 0x17	; 23
 4a8:	b0 f0       	brcs	.+44     	; 0x4d6 <__fixunssfsi+0x3e>
 4aa:	e1 f0       	breq	.+56     	; 0x4e4 <__fixunssfsi+0x4c>
 4ac:	66 0f       	add	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	88 1f       	adc	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	1a f0       	brmi	.+6      	; 0x4bc <__fixunssfsi+0x24>
 4b6:	ba 95       	dec	r27
 4b8:	c9 f7       	brne	.-14     	; 0x4ac <__fixunssfsi+0x14>
 4ba:	14 c0       	rjmp	.+40     	; 0x4e4 <__fixunssfsi+0x4c>
 4bc:	b1 30       	cpi	r27, 0x01	; 1
 4be:	91 f0       	breq	.+36     	; 0x4e4 <__fixunssfsi+0x4c>
 4c0:	0e 94 02 03 	call	0x604	; 0x604 <__fp_zero>
 4c4:	b1 e0       	ldi	r27, 0x01	; 1
 4c6:	08 95       	ret
 4c8:	0c 94 02 03 	jmp	0x604	; 0x604 <__fp_zero>
 4cc:	67 2f       	mov	r22, r23
 4ce:	78 2f       	mov	r23, r24
 4d0:	88 27       	eor	r24, r24
 4d2:	b8 5f       	subi	r27, 0xF8	; 248
 4d4:	39 f0       	breq	.+14     	; 0x4e4 <__fixunssfsi+0x4c>
 4d6:	b9 3f       	cpi	r27, 0xF9	; 249
 4d8:	cc f3       	brlt	.-14     	; 0x4cc <__fixunssfsi+0x34>
 4da:	86 95       	lsr	r24
 4dc:	77 95       	ror	r23
 4de:	67 95       	ror	r22
 4e0:	b3 95       	inc	r27
 4e2:	d9 f7       	brne	.-10     	; 0x4da <__fixunssfsi+0x42>
 4e4:	3e f4       	brtc	.+14     	; 0x4f4 <__fixunssfsi+0x5c>
 4e6:	90 95       	com	r25
 4e8:	80 95       	com	r24
 4ea:	70 95       	com	r23
 4ec:	61 95       	neg	r22
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255
 4f0:	8f 4f       	sbci	r24, 0xFF	; 255
 4f2:	9f 4f       	sbci	r25, 0xFF	; 255
 4f4:	08 95       	ret

000004f6 <__floatunsisf>:
 4f6:	e8 94       	clt
 4f8:	09 c0       	rjmp	.+18     	; 0x50c <__floatsisf+0x12>

000004fa <__floatsisf>:
 4fa:	97 fb       	bst	r25, 7
 4fc:	3e f4       	brtc	.+14     	; 0x50c <__floatsisf+0x12>
 4fe:	90 95       	com	r25
 500:	80 95       	com	r24
 502:	70 95       	com	r23
 504:	61 95       	neg	r22
 506:	7f 4f       	sbci	r23, 0xFF	; 255
 508:	8f 4f       	sbci	r24, 0xFF	; 255
 50a:	9f 4f       	sbci	r25, 0xFF	; 255
 50c:	99 23       	and	r25, r25
 50e:	a9 f0       	breq	.+42     	; 0x53a <__floatsisf+0x40>
 510:	f9 2f       	mov	r31, r25
 512:	96 e9       	ldi	r25, 0x96	; 150
 514:	bb 27       	eor	r27, r27
 516:	93 95       	inc	r25
 518:	f6 95       	lsr	r31
 51a:	87 95       	ror	r24
 51c:	77 95       	ror	r23
 51e:	67 95       	ror	r22
 520:	b7 95       	ror	r27
 522:	f1 11       	cpse	r31, r1
 524:	f8 cf       	rjmp	.-16     	; 0x516 <__floatsisf+0x1c>
 526:	fa f4       	brpl	.+62     	; 0x566 <__floatsisf+0x6c>
 528:	bb 0f       	add	r27, r27
 52a:	11 f4       	brne	.+4      	; 0x530 <__floatsisf+0x36>
 52c:	60 ff       	sbrs	r22, 0
 52e:	1b c0       	rjmp	.+54     	; 0x566 <__floatsisf+0x6c>
 530:	6f 5f       	subi	r22, 0xFF	; 255
 532:	7f 4f       	sbci	r23, 0xFF	; 255
 534:	8f 4f       	sbci	r24, 0xFF	; 255
 536:	9f 4f       	sbci	r25, 0xFF	; 255
 538:	16 c0       	rjmp	.+44     	; 0x566 <__floatsisf+0x6c>
 53a:	88 23       	and	r24, r24
 53c:	11 f0       	breq	.+4      	; 0x542 <__floatsisf+0x48>
 53e:	96 e9       	ldi	r25, 0x96	; 150
 540:	11 c0       	rjmp	.+34     	; 0x564 <__floatsisf+0x6a>
 542:	77 23       	and	r23, r23
 544:	21 f0       	breq	.+8      	; 0x54e <__floatsisf+0x54>
 546:	9e e8       	ldi	r25, 0x8E	; 142
 548:	87 2f       	mov	r24, r23
 54a:	76 2f       	mov	r23, r22
 54c:	05 c0       	rjmp	.+10     	; 0x558 <__floatsisf+0x5e>
 54e:	66 23       	and	r22, r22
 550:	71 f0       	breq	.+28     	; 0x56e <__floatsisf+0x74>
 552:	96 e8       	ldi	r25, 0x86	; 134
 554:	86 2f       	mov	r24, r22
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	2a f0       	brmi	.+10     	; 0x566 <__floatsisf+0x6c>
 55c:	9a 95       	dec	r25
 55e:	66 0f       	add	r22, r22
 560:	77 1f       	adc	r23, r23
 562:	88 1f       	adc	r24, r24
 564:	da f7       	brpl	.-10     	; 0x55c <__floatsisf+0x62>
 566:	88 0f       	add	r24, r24
 568:	96 95       	lsr	r25
 56a:	87 95       	ror	r24
 56c:	97 f9       	bld	r25, 7
 56e:	08 95       	ret

00000570 <__fp_inf>:
 570:	97 f9       	bld	r25, 7
 572:	9f 67       	ori	r25, 0x7F	; 127
 574:	80 e8       	ldi	r24, 0x80	; 128
 576:	70 e0       	ldi	r23, 0x00	; 0
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	08 95       	ret

0000057c <__fp_nan>:
 57c:	9f ef       	ldi	r25, 0xFF	; 255
 57e:	80 ec       	ldi	r24, 0xC0	; 192
 580:	08 95       	ret

00000582 <__fp_pscA>:
 582:	00 24       	eor	r0, r0
 584:	0a 94       	dec	r0
 586:	16 16       	cp	r1, r22
 588:	17 06       	cpc	r1, r23
 58a:	18 06       	cpc	r1, r24
 58c:	09 06       	cpc	r0, r25
 58e:	08 95       	ret

00000590 <__fp_pscB>:
 590:	00 24       	eor	r0, r0
 592:	0a 94       	dec	r0
 594:	12 16       	cp	r1, r18
 596:	13 06       	cpc	r1, r19
 598:	14 06       	cpc	r1, r20
 59a:	05 06       	cpc	r0, r21
 59c:	08 95       	ret

0000059e <__fp_round>:
 59e:	09 2e       	mov	r0, r25
 5a0:	03 94       	inc	r0
 5a2:	00 0c       	add	r0, r0
 5a4:	11 f4       	brne	.+4      	; 0x5aa <__fp_round+0xc>
 5a6:	88 23       	and	r24, r24
 5a8:	52 f0       	brmi	.+20     	; 0x5be <__fp_round+0x20>
 5aa:	bb 0f       	add	r27, r27
 5ac:	40 f4       	brcc	.+16     	; 0x5be <__fp_round+0x20>
 5ae:	bf 2b       	or	r27, r31
 5b0:	11 f4       	brne	.+4      	; 0x5b6 <__fp_round+0x18>
 5b2:	60 ff       	sbrs	r22, 0
 5b4:	04 c0       	rjmp	.+8      	; 0x5be <__fp_round+0x20>
 5b6:	6f 5f       	subi	r22, 0xFF	; 255
 5b8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ba:	8f 4f       	sbci	r24, 0xFF	; 255
 5bc:	9f 4f       	sbci	r25, 0xFF	; 255
 5be:	08 95       	ret

000005c0 <__fp_split3>:
 5c0:	57 fd       	sbrc	r21, 7
 5c2:	90 58       	subi	r25, 0x80	; 128
 5c4:	44 0f       	add	r20, r20
 5c6:	55 1f       	adc	r21, r21
 5c8:	59 f0       	breq	.+22     	; 0x5e0 <__fp_splitA+0x10>
 5ca:	5f 3f       	cpi	r21, 0xFF	; 255
 5cc:	71 f0       	breq	.+28     	; 0x5ea <__fp_splitA+0x1a>
 5ce:	47 95       	ror	r20

000005d0 <__fp_splitA>:
 5d0:	88 0f       	add	r24, r24
 5d2:	97 fb       	bst	r25, 7
 5d4:	99 1f       	adc	r25, r25
 5d6:	61 f0       	breq	.+24     	; 0x5f0 <__fp_splitA+0x20>
 5d8:	9f 3f       	cpi	r25, 0xFF	; 255
 5da:	79 f0       	breq	.+30     	; 0x5fa <__fp_splitA+0x2a>
 5dc:	87 95       	ror	r24
 5de:	08 95       	ret
 5e0:	12 16       	cp	r1, r18
 5e2:	13 06       	cpc	r1, r19
 5e4:	14 06       	cpc	r1, r20
 5e6:	55 1f       	adc	r21, r21
 5e8:	f2 cf       	rjmp	.-28     	; 0x5ce <__fp_split3+0xe>
 5ea:	46 95       	lsr	r20
 5ec:	f1 df       	rcall	.-30     	; 0x5d0 <__fp_splitA>
 5ee:	08 c0       	rjmp	.+16     	; 0x600 <__fp_splitA+0x30>
 5f0:	16 16       	cp	r1, r22
 5f2:	17 06       	cpc	r1, r23
 5f4:	18 06       	cpc	r1, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	f1 cf       	rjmp	.-30     	; 0x5dc <__fp_splitA+0xc>
 5fa:	86 95       	lsr	r24
 5fc:	71 05       	cpc	r23, r1
 5fe:	61 05       	cpc	r22, r1
 600:	08 94       	sec
 602:	08 95       	ret

00000604 <__fp_zero>:
 604:	e8 94       	clt

00000606 <__fp_szero>:
 606:	bb 27       	eor	r27, r27
 608:	66 27       	eor	r22, r22
 60a:	77 27       	eor	r23, r23
 60c:	cb 01       	movw	r24, r22
 60e:	97 f9       	bld	r25, 7
 610:	08 95       	ret

00000612 <__mulsf3>:
 612:	0e 94 1c 03 	call	0x638	; 0x638 <__mulsf3x>
 616:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_round>
 61a:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_pscA>
 61e:	38 f0       	brcs	.+14     	; 0x62e <__mulsf3+0x1c>
 620:	0e 94 c8 02 	call	0x590	; 0x590 <__fp_pscB>
 624:	20 f0       	brcs	.+8      	; 0x62e <__mulsf3+0x1c>
 626:	95 23       	and	r25, r21
 628:	11 f0       	breq	.+4      	; 0x62e <__mulsf3+0x1c>
 62a:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_inf>
 62e:	0c 94 be 02 	jmp	0x57c	; 0x57c <__fp_nan>
 632:	11 24       	eor	r1, r1
 634:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_szero>

00000638 <__mulsf3x>:
 638:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_split3>
 63c:	70 f3       	brcs	.-36     	; 0x61a <__mulsf3+0x8>

0000063e <__mulsf3_pse>:
 63e:	95 9f       	mul	r25, r21
 640:	c1 f3       	breq	.-16     	; 0x632 <__mulsf3+0x20>
 642:	95 0f       	add	r25, r21
 644:	50 e0       	ldi	r21, 0x00	; 0
 646:	55 1f       	adc	r21, r21
 648:	62 9f       	mul	r22, r18
 64a:	f0 01       	movw	r30, r0
 64c:	72 9f       	mul	r23, r18
 64e:	bb 27       	eor	r27, r27
 650:	f0 0d       	add	r31, r0
 652:	b1 1d       	adc	r27, r1
 654:	63 9f       	mul	r22, r19
 656:	aa 27       	eor	r26, r26
 658:	f0 0d       	add	r31, r0
 65a:	b1 1d       	adc	r27, r1
 65c:	aa 1f       	adc	r26, r26
 65e:	64 9f       	mul	r22, r20
 660:	66 27       	eor	r22, r22
 662:	b0 0d       	add	r27, r0
 664:	a1 1d       	adc	r26, r1
 666:	66 1f       	adc	r22, r22
 668:	82 9f       	mul	r24, r18
 66a:	22 27       	eor	r18, r18
 66c:	b0 0d       	add	r27, r0
 66e:	a1 1d       	adc	r26, r1
 670:	62 1f       	adc	r22, r18
 672:	73 9f       	mul	r23, r19
 674:	b0 0d       	add	r27, r0
 676:	a1 1d       	adc	r26, r1
 678:	62 1f       	adc	r22, r18
 67a:	83 9f       	mul	r24, r19
 67c:	a0 0d       	add	r26, r0
 67e:	61 1d       	adc	r22, r1
 680:	22 1f       	adc	r18, r18
 682:	74 9f       	mul	r23, r20
 684:	33 27       	eor	r19, r19
 686:	a0 0d       	add	r26, r0
 688:	61 1d       	adc	r22, r1
 68a:	23 1f       	adc	r18, r19
 68c:	84 9f       	mul	r24, r20
 68e:	60 0d       	add	r22, r0
 690:	21 1d       	adc	r18, r1
 692:	82 2f       	mov	r24, r18
 694:	76 2f       	mov	r23, r22
 696:	6a 2f       	mov	r22, r26
 698:	11 24       	eor	r1, r1
 69a:	9f 57       	subi	r25, 0x7F	; 127
 69c:	50 40       	sbci	r21, 0x00	; 0
 69e:	9a f0       	brmi	.+38     	; 0x6c6 <__mulsf3_pse+0x88>
 6a0:	f1 f0       	breq	.+60     	; 0x6de <__mulsf3_pse+0xa0>
 6a2:	88 23       	and	r24, r24
 6a4:	4a f0       	brmi	.+18     	; 0x6b8 <__mulsf3_pse+0x7a>
 6a6:	ee 0f       	add	r30, r30
 6a8:	ff 1f       	adc	r31, r31
 6aa:	bb 1f       	adc	r27, r27
 6ac:	66 1f       	adc	r22, r22
 6ae:	77 1f       	adc	r23, r23
 6b0:	88 1f       	adc	r24, r24
 6b2:	91 50       	subi	r25, 0x01	; 1
 6b4:	50 40       	sbci	r21, 0x00	; 0
 6b6:	a9 f7       	brne	.-22     	; 0x6a2 <__mulsf3_pse+0x64>
 6b8:	9e 3f       	cpi	r25, 0xFE	; 254
 6ba:	51 05       	cpc	r21, r1
 6bc:	80 f0       	brcs	.+32     	; 0x6de <__mulsf3_pse+0xa0>
 6be:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_inf>
 6c2:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_szero>
 6c6:	5f 3f       	cpi	r21, 0xFF	; 255
 6c8:	e4 f3       	brlt	.-8      	; 0x6c2 <__mulsf3_pse+0x84>
 6ca:	98 3e       	cpi	r25, 0xE8	; 232
 6cc:	d4 f3       	brlt	.-12     	; 0x6c2 <__mulsf3_pse+0x84>
 6ce:	86 95       	lsr	r24
 6d0:	77 95       	ror	r23
 6d2:	67 95       	ror	r22
 6d4:	b7 95       	ror	r27
 6d6:	f7 95       	ror	r31
 6d8:	e7 95       	ror	r30
 6da:	9f 5f       	subi	r25, 0xFF	; 255
 6dc:	c1 f7       	brne	.-16     	; 0x6ce <__mulsf3_pse+0x90>
 6de:	fe 2b       	or	r31, r30
 6e0:	88 0f       	add	r24, r24
 6e2:	91 1d       	adc	r25, r1
 6e4:	96 95       	lsr	r25
 6e6:	87 95       	ror	r24
 6e8:	97 f9       	bld	r25, 7
 6ea:	08 95       	ret

000006ec <_exit>:
 6ec:	f8 94       	cli

000006ee <__stop_program>:
 6ee:	ff cf       	rjmp	.-2      	; 0x6ee <__stop_program>
