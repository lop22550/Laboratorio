
Laboratorio 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000342  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000371  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000037f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b24  00000000  00000000  000003bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b5  00000000  00000000  00000ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bd  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001958  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001cb  00000000  00000000  00001be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000002a0  000002a0  00000334  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.init    0000005e  000001c0  000001c0  00000254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.incremento 00000010  00000280  00000280  00000314  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.decremento 00000010  00000290  00000290  00000324  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    000000ee  000000d2  000000d2  00000166  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_21 0000004c  0000021e  0000021e  000002b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data.Lista 00000010  000000c2  000000c2  00000156  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .bss.valor_disp1 00000001  00800100  00800100  00000342  2**0
                  ALLOC
 21 .bss.valor_disp2 00000001  00800101  00800101  00000342  2**0
                  ALLOC
 22 .bss.valor_adc 00000001  00800102  00800102  00000342  2**0
                  ALLOC
 23 .bss.contador 00000001  00800103  00800103  00000342  2**0
                  ALLOC
 24 .text.__dummy_fini 00000002  000002a8  000002a8  0000033c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_funcs_on_exit 00000002  000002aa  000002aa  0000033e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_simulator_exit 00000002  000002ac  000002ac  00000340  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.exit    00000016  0000026a  0000026a  000002fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text._Exit   00000004  000002a4  000002a4  00000338  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
   8:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
   c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  10:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  14:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  18:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  1c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  20:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  24:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  28:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  2c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  30:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  34:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  38:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  3c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  40:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  44:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  48:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  4c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  50:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  54:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__vector_21>
  58:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  5c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  60:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>
  64:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 04       	cpc	r0, r1
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  ba:	0c 94 35 01 	jmp	0x26a	; 0x26a <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

000002a0 <__bad_interrupt>:
 2a0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.init:

000001c0 <init>:
const uint8_t Lista [16] = {63, 6, 91, 79, 102, 109, 125, 7, 127, 111, 119, 124, 57, 94, 121, 113};
	
	
void init(void){ 
 //Configuración del ADC
 ADMUX = 0b0101; //Selectiona el puerto ADC5 
 1c0:	ac e7       	ldi	r26, 0x7C	; 124
 1c2:	b0 e0       	ldi	r27, 0x00	; 0
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	8c 93       	st	X, r24
 ADCSRA = 0;
 1c8:	ea e7       	ldi	r30, 0x7A	; 122
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	10 82       	st	Z, r1
 ADMUX |= (1<<ADLAR); //AJUSTE A LA IZQUIERDA (SOLO SE USA ADCH)
 1ce:	8c 91       	ld	r24, X
 1d0:	80 62       	ori	r24, 0x20	; 32
 1d2:	8c 93       	st	X, r24
 ADMUX |= (1<<REFS0); //Selecciona un voltaje interno de referencia de 5V. 
 1d4:	8c 91       	ld	r24, X
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	8c 93       	st	X, r24
 ADMUX &= ~(1<<REFS1);
 1da:	8c 91       	ld	r24, X
 1dc:	8f 77       	andi	r24, 0x7F	; 127
 1de:	8c 93       	st	X, r24
 
 //SE ENCIENDE ADC
 ADCSRA |= (1<<ADEN);
 1e0:	80 81       	ld	r24, Z
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	80 83       	st	Z, r24
 
 // SE HABILITA LA INTERRUPCIÓN DEL ADC
 ADCSRA |= (1<<ADIE);
 1e6:	80 81       	ld	r24, Z
 1e8:	88 60       	ori	r24, 0x08	; 8
 1ea:	80 83       	st	Z, r24
 
 //PRESCALER DE 128 (125kHZ)
 ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 1ec:	80 81       	ld	r24, Z
 1ee:	87 60       	ori	r24, 0x07	; 7
 1f0:	80 83       	st	Z, r24
 
 //Deshabilita la entrada digital PC5
 DIDR0 |= (1<<ADC5D);
 1f2:	ee e7       	ldi	r30, 0x7E	; 126
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	80 62       	ori	r24, 0x20	; 32
 1fa:	80 83       	st	Z, r24
 
 //Apaga RX y TX
 UCSR0B = 0; 
 1fc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  
 //inicializando puertos de salida. 
 DDRD = 0xFF; 
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	8a b9       	out	0x0a, r24	; 10
 PORTD = 0; 
 204:	1b b8       	out	0x0b, r1	; 11
  
 DDRB = 0xFF; 
 206:	84 b9       	out	0x04, r24	; 4
 PORTB = 0; 
 208:	15 b8       	out	0x05, r1	; 5
  
 // Inicializando puertos de entrada para los botones 
 DDRC &= ~(1<<PC1); 
 20a:	87 b1       	in	r24, 0x07	; 7
 20c:	8d 7f       	andi	r24, 0xFD	; 253
 20e:	87 b9       	out	0x07, r24	; 7
 DDRC &= ~(1<<PC2); 
 210:	87 b1       	in	r24, 0x07	; 7
 212:	8b 7f       	andi	r24, 0xFB	; 251
 214:	87 b9       	out	0x07, r24	; 7
 PORTC |= (1<<PC1)|(1<<PC2); //Habilita las resistencias pull up internas  
 216:	88 b1       	in	r24, 0x08	; 8
 218:	86 60       	ori	r24, 0x06	; 6
 21a:	88 b9       	out	0x08, r24	; 8
 21c:	08 95       	ret

Disassembly of section .text.incremento:

00000280 <incremento>:
 }; 
 
 
void incremento(void){ 
 if (contador<255){  
 280:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador>
 284:	8f 3f       	cpi	r24, 0xFF	; 255
 286:	19 f0       	breq	.+6      	; 0x28e <incremento+0xe>
  contador++; 
 288:	8f 5f       	subi	r24, 0xFF	; 255
 28a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <contador>
 28e:	08 95       	ret

Disassembly of section .text.decremento:

00000290 <decremento>:
  //PORTD = contador;  
 } 
}; 
 
void decremento(void){ 
 if (contador>0){ 
 290:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador>
 294:	88 23       	and	r24, r24
 296:	19 f0       	breq	.+6      	; 0x29e <decremento+0xe>
  contador--; 
 298:	81 50       	subi	r24, 0x01	; 1
 29a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <contador>
 29e:	08 95       	ret

Disassembly of section .text.main:

000000d2 <main>:
}; 
 
 
int main(void)
{
	cli();
  d2:	f8 94       	cli
    init();
  d4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <init>
	sei();
  d8:	78 94       	sei
	
	ADCSRA |= (1<<ADSC); //Inicia la conversión del ADC
  da:	ea e7       	ldi	r30, 0x7A	; 122
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	8f e1       	ldi	r24, 0x1F	; 31
  e6:	9e e4       	ldi	r25, 0x4E	; 78
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x16>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x1c>
  ee:	00 00       	nop
	
	while(1)
    {	
		
		_delay_ms(5);
		PORTB &= ~(1<<PB0); //Se apagan los LEDS del contador binario
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	85 b9       	out	0x05, r24	; 5
		PORTB |= (1<<PB1);	//Se encienden los displays de 7 segmentos de unidades.
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1<<PB2);
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	8b 7f       	andi	r24, 0xFB	; 251
 100:	85 b9       	out	0x05, r24	; 5
		PORTD = Lista[valor_disp1];
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	a0 e0       	ldi	r26, 0x00	; 0
 10a:	8e 53       	subi	r24, 0x3E	; 62
 10c:	9f 4f       	sbci	r25, 0xFF	; 255
 10e:	af 4f       	sbci	r26, 0xFF	; 255
 110:	fc 01       	movw	r30, r24
 112:	84 91       	lpm	r24, Z
 114:	a7 fd       	sbrc	r26, 7
 116:	80 81       	ld	r24, Z
 118:	8b b9       	out	0x0b, r24	; 11
 11a:	8f e1       	ldi	r24, 0x1F	; 31
 11c:	9e e4       	ldi	r25, 0x4E	; 78
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x4c>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x52>
 124:	00 00       	nop
		_delay_ms(5);
		PORTB &= ~(1<<PB0); //Se apagan los LEDS del contador binario
 126:	85 b1       	in	r24, 0x05	; 5
 128:	8e 7f       	andi	r24, 0xFE	; 254
 12a:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1<<PB1);
 12c:	85 b1       	in	r24, 0x05	; 5
 12e:	8d 7f       	andi	r24, 0xFD	; 253
 130:	85 b9       	out	0x05, r24	; 5
		PORTB |= (1<<PB2);	//Se encienden los displays de 7 segmentos de decenas.
 132:	85 b1       	in	r24, 0x05	; 5
 134:	84 60       	ori	r24, 0x04	; 4
 136:	85 b9       	out	0x05, r24	; 5
		PORTD = Lista[valor_disp2];
 138:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <valor_disp2>
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	a0 e0       	ldi	r26, 0x00	; 0
 140:	8e 53       	subi	r24, 0x3E	; 62
 142:	9f 4f       	sbci	r25, 0xFF	; 255
 144:	af 4f       	sbci	r26, 0xFF	; 255
 146:	fc 01       	movw	r30, r24
 148:	84 91       	lpm	r24, Z
 14a:	a7 fd       	sbrc	r26, 7
 14c:	80 81       	ld	r24, Z
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	8f e1       	ldi	r24, 0x1F	; 31
 152:	9e e4       	ldi	r25, 0x4E	; 78
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <main+0x82>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0x88>
 15a:	00 00       	nop
		
		_delay_ms(5);
		PORTB |= (1<<PB0);	//Se enciende los LEDS del contador binario
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	81 60       	ori	r24, 0x01	; 1
 160:	85 b9       	out	0x05, r24	; 5
		PORTB |= (1<<PB1);	//Se apagan los displays de 7 segmentos.
 162:	85 b1       	in	r24, 0x05	; 5
 164:	82 60       	ori	r24, 0x02	; 2
 166:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1<<PB2);
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	8b 7f       	andi	r24, 0xFB	; 251
 16c:	85 b9       	out	0x05, r24	; 5
		PORTD = contador;
 16e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador>
 172:	8b b9       	out	0x0b, r24	; 11
  
	    if (!(PINC & (1<<PC1))){
 174:	31 99       	sbic	0x06, 1	; 6
 176:	0a c0       	rjmp	.+20     	; 0x18c <main+0xba>
 178:	8f e3       	ldi	r24, 0x3F	; 63
 17a:	9c e9       	ldi	r25, 0x9C	; 156
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <main+0xaa>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0xb0>
 182:	00 00       	nop
		    _delay_ms(10);
		    incremento();
 184:	0e 94 40 01 	call	0x280	; 0x280 <incremento>
		   while (!(PINC & (1 << PC1)));
 188:	31 9b       	sbis	0x06, 1	; 6
 18a:	fe cf       	rjmp	.-4      	; 0x188 <main+0xb6>
	    }
	     
	    if  (!(PINC & (1<<PC2))){
 18c:	32 99       	sbic	0x06, 2	; 6
 18e:	0a c0       	rjmp	.+20     	; 0x1a4 <main+0xd2>
 190:	8f e3       	ldi	r24, 0x3F	; 63
 192:	9c e9       	ldi	r25, 0x9C	; 156
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0xc2>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0xc8>
 19a:	00 00       	nop
		    _delay_ms(10);
		    decremento();
 19c:	0e 94 48 01 	call	0x290	; 0x290 <decremento>
		   while (!(PINC & (1 << PC2)));
 1a0:	32 9b       	sbis	0x06, 2	; 6
 1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <main+0xce>
	    }
		
		if (valor_adc == contador){
 1a4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <valor_adc>
 1a8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador>
 1ac:	98 13       	cpse	r25, r24
 1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <main+0xe6>
			PORTB |= (1<<PB3);
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	88 60       	ori	r24, 0x08	; 8
 1b4:	85 b9       	out	0x05, r24	; 5
 1b6:	96 cf       	rjmp	.-212    	; 0xe4 <main+0x12>
		} else {
			PORTB &= ~(1<<PB3);}
 1b8:	85 b1       	in	r24, 0x05	; 5
 1ba:	87 7f       	andi	r24, 0xF7	; 247
 1bc:	85 b9       	out	0x05, r24	; 5
 1be:	92 cf       	rjmp	.-220    	; 0xe4 <main+0x12>

Disassembly of section .text.__vector_21:

0000021e <__vector_21>:
	
	return 0;   //TODO:: Please write your application code
}


ISR (ADC_vect){
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
	/*PORTB &= ~(1<<PB0); //Se apagan los LEDS del contador binario
	PORTB |= (1<<PB1);	//Se encienden los displays de 7 segmentos de unidades.
	PORTB |= (1<<PB2);*/
	
	//uint8_t 
	valor_adc = ADCH; // 1010 1110 & 0000 1111
 230:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 234:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <valor_adc>
	//uint8_t 
	valor_disp2 = valor_adc & 0b00001111; // Result = 0000 1110 // 14
 238:	98 2f       	mov	r25, r24
 23a:	9f 70       	andi	r25, 0x0F	; 15
 23c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <valor_disp2>
	//uint8_t	
	valor_disp1 = (valor_adc & 0b11110000) >> 4; // Result = 0000 1010
 240:	82 95       	swap	r24
 242:	8f 70       	andi	r24, 0x0F	; 15
 244:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	
	
	ADCSRA |= (1<<ADIF);
 248:	ea e7       	ldi	r30, 0x7A	; 122
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	80 61       	ori	r24, 0x10	; 16
 250:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 252:	80 81       	ld	r24, Z
 254:	80 64       	ori	r24, 0x40	; 64
 256:	80 83       	st	Z, r24
};
 258:	ff 91       	pop	r31
 25a:	ef 91       	pop	r30
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

Disassembly of section .text.__dummy_fini:

000002a8 <_fini>:
 2a8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000002aa <__funcs_on_exit>:
 2aa:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000002ac <__simulator_exit>:
 2ac:	08 95       	ret

Disassembly of section .text.exit:

0000026a <exit>:
 26a:	ec 01       	movw	r28, r24
 26c:	0e 94 55 01 	call	0x2aa	; 0x2aa <__funcs_on_exit>
 270:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_fini>
 274:	ce 01       	movw	r24, r28
 276:	0e 94 56 01 	call	0x2ac	; 0x2ac <__simulator_exit>
 27a:	ce 01       	movw	r24, r28
 27c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_Exit>

Disassembly of section .text._Exit:

000002a4 <_Exit>:
 2a4:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
