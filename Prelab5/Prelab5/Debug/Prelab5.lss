
Prelab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000914  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000782  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ce  00000000  00000000  00001442  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00001910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042b  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000013c  00000000  00000000  00001e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001f87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 67 00 	call	0xce	; 0xce <main>
  88:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC1>:
uint8_t Senal_servo1 = 0;
uint8_t LED_variable = 0; 

void initADC1(void){
	//Configuración del ADC
	ADMUX = 0b0101; //Selectiona el puerto ADC5
  90:	ac e7       	ldi	r26, 0x7C	; 124
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	85 e0       	ldi	r24, 0x05	; 5
  96:	8c 93       	st	X, r24
	ADCSRA = 0;
  98:	ea e7       	ldi	r30, 0x7A	; 122
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	10 82       	st	Z, r1
	
	ADMUX |= (1<<ADLAR); //AJUSTE A LA IZQUIERDA (SOLO SE USA ADCH)
  9e:	8c 91       	ld	r24, X
  a0:	80 62       	ori	r24, 0x20	; 32
  a2:	8c 93       	st	X, r24
	ADMUX |= (1<<REFS0); //Selecciona un voltaje interno de referencia de 5V.
  a4:	8c 91       	ld	r24, X
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	8c 93       	st	X, r24
	ADMUX &= ~(1<<REFS1);
  aa:	8c 91       	ld	r24, X
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADEN);//SE ENCIENDE ADC
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE); // SE HABILITA LA INTERRUPCIÓN DEL ADC
  b6:	80 81       	ld	r24, Z
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//PRESCALER DE 128 (125kHZ)
  bc:	80 81       	ld	r24, Z
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	80 83       	st	Z, r24
	
	DIDR0 |= (1<<ADC5D); //Deshabilita la entrada digital PC5	
  c2:	ee e7       	ldi	r30, 0x7E	; 126
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 62       	ori	r24, 0x20	; 32
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret

000000ce <main>:
}*/


int main(void)
{
	DDRB = 0xFF;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	84 b9       	out	0x04, r24	; 4
	PORTB = 0; 
  d2:	15 b8       	out	0x05, r1	; 5

	cli();
  d4:	f8 94       	cli
	initADC1();
  d6:	0e 94 48 00 	call	0x90	; 0x90 <initADC1>
	initPWM1A();
  da:	0e 94 ce 00 	call	0x19c	; 0x19c <initPWM1A>
	initPWM2();
  de:	0e 94 01 01 	call	0x202	; 0x202 <initPWM2>
	sei();
  e2:	78 94       	sei
	ADCSRA |= (1<<ADSC);
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	80 83       	st	Z, r24

	UCSR0A = 0;
  ee:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = 0;
  f2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	while (1) 
    {	
		//ADMUX &= 0b11110000;
		//ADMUX |= (1<<MUX2)|(1<<MUX0); //Activa el Puerto A5
		updateDutyCycleA1(valor_ADC);	
  f6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <valor_ADC>
  fa:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <updateDutyCycleA1>
		/*_delay_ms(25);
		ADMUX &= 0b11110000;
		ADMUX |= (1<<MUX2); //Activa el Puerto A4
		updateDutyCycle2(valor_ADC);*/
		
		ADMUX &= 0b11110000;
  fe:	ec e7       	ldi	r30, 0x7C	; 124
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX1)|(1<<MUX0); //Activa el Puerto A3
 108:	80 81       	ld	r24, Z
 10a:	83 60       	ori	r24, 0x03	; 3
 10c:	80 83       	st	Z, r24
		LED_variable++;
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 112:	8f 5f       	subi	r24, 0xFF	; 255
 114:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (LED_variable == 0){
 118:	81 11       	cpse	r24, r1
 11a:	04 c0       	rjmp	.+8      	; 0x124 <main+0x56>
			PORTB |= (1<<PORTB0);
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	85 b9       	out	0x05, r24	; 5
 122:	e9 cf       	rjmp	.-46     	; 0xf6 <main+0x28>
		} else if (LED_variable == valor_ADC) {
 124:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <valor_ADC>
 128:	89 13       	cpse	r24, r25
 12a:	e5 cf       	rjmp	.-54     	; 0xf6 <main+0x28>
			PORTB &= ~(1<<PORTB0);
 12c:	85 b1       	in	r24, 0x05	; 5
 12e:	8e 7f       	andi	r24, 0xFE	; 254
 130:	85 b9       	out	0x05, r24	; 5
 132:	e1 cf       	rjmp	.-62     	; 0xf6 <main+0x28>

00000134 <__vector_21>:
		
		
    }
}

ISR (ADC_vect){
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
	valor_ADC = ADCH;
 156:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 15a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <valor_ADC>
	updateDutyCycleA1(valor_ADC);
 15e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <updateDutyCycleA1>
	updateDutyCycle2(valor_ADC);
 162:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <valor_ADC>
 166:	0e 94 14 01 	call	0x228	; 0x228 <updateDutyCycle2>
	ADCSRA |= (1<<ADIF);
 16a:	ea e7       	ldi	r30, 0x7A	; 122
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	80 61       	ori	r24, 0x10	; 16
 172:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 174:	80 81       	ld	r24, Z
 176:	80 64       	ori	r24, 0x40	; 64
 178:	80 83       	st	Z, r24
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	7f 91       	pop	r23
 188:	6f 91       	pop	r22
 18a:	5f 91       	pop	r21
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <initPWM1A>:
 */ 

#include "PWM1.h"

void initPWM1A (){
	DDRB |= (1<<PORTB1);	//Se está configurando el puerto OC1A como salida
 19c:	84 b1       	in	r24, 0x04	; 4
 19e:	82 60       	ori	r24, 0x02	; 2
 1a0:	84 b9       	out	0x04, r24	; 4
	
	TCCR1A = 0;
 1a2:	e0 e8       	ldi	r30, 0x80	; 128
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	10 82       	st	Z, r1
	TCCR1B = 0;
 1a8:	a1 e8       	ldi	r26, 0x81	; 129
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	1c 92       	st	X, r1
	
	TCCR1A |= (1<<COM1A1); // Configurando OC1A como No invertido	
 1ae:	80 81       	ld	r24, Z
 1b0:	80 68       	ori	r24, 0x80	; 128
 1b2:	80 83       	st	Z, r24
	TCCR1A |= (1<<WGM11); //Configurando Modo Fast PWM con ICR1 como TOP	
 1b4:	80 81       	ld	r24, Z
 1b6:	82 60       	ori	r24, 0x02	; 2
 1b8:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13)|(1<<WGM12)|(1<<CS12)|(1<<CS10); //Configurando Modo Fast PWM con ICR1 como TOP | Prescaler de 1024		
 1ba:	8c 91       	ld	r24, X
 1bc:	8d 61       	ori	r24, 0x1D	; 29
 1be:	8c 93       	st	X, r24
	 
	ICR1H = (PWM_TOP & 0xFF00)>>8;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L = (PWM_TOP & 0x00FF);
 1c6:	87 e3       	ldi	r24, 0x37	; 55
 1c8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

	OCR1AH =(MIN1 & 0xFF00)>>8;
 1cc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = (MIN1 & 0x00FF);	
 1d0:	89 e0       	ldi	r24, 0x09	; 9
 1d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1d6:	08 95       	ret

000001d8 <updateDutyCycleA1>:
}

void updateDutyCycleA1(uint8_t valor_ADC){
	//uint8_t Mappeo = (valor_ADC / 255)*(MAX-MIN)+MIN;
	uint8_t Mappeo1 = (valor_ADC / 6);
 1d8:	9b ea       	ldi	r25, 0xAB	; 171
 1da:	89 9f       	mul	r24, r25
 1dc:	81 2d       	mov	r24, r1
 1de:	11 24       	eor	r1, r1
 1e0:	86 95       	lsr	r24
 1e2:	86 95       	lsr	r24
	uint8_t Senal_Servo1 = Mappeo1;

	OCR1AH = (Senal_Servo1 & 0xFF00)>>8;
 1e4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = (Senal_Servo1 & 0x00FF);	
 1e8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1ec:	08 95       	ret

000001ee <__vector_11>:
	}



ISR (TIMER1_COMPA_vect){
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
	//
}
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <initPWM2>:
 */ 

#include "PWM2.h"

void initPWM2 (void){
	DDRB |= (1<<DDB3);	//Se está configurando el puerto OC1A como salida
 202:	84 b1       	in	r24, 0x04	; 4
 204:	88 60       	ori	r24, 0x08	; 8
 206:	84 b9       	out	0x04, r24	; 4
	
	TCCR2A = 0;
 208:	e0 eb       	ldi	r30, 0xB0	; 176
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	10 82       	st	Z, r1
	TCCR2B = 0;
 20e:	a1 eb       	ldi	r26, 0xB1	; 177
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	1c 92       	st	X, r1
	
	TCCR2A |= (1<<COM2A1); // Configurando OC1A como No invertido
 214:	80 81       	ld	r24, Z
 216:	80 68       	ori	r24, 0x80	; 128
 218:	80 83       	st	Z, r24
	TCCR2A |= (1<<WGM21)|(1<<WGM20); //Configurando Modo Fast PWM OCR2A
 21a:	80 81       	ld	r24, Z
 21c:	83 60       	ori	r24, 0x03	; 3
 21e:	80 83       	st	Z, r24
	TCCR2B |= (1<<WGM22)|(1<<CS22)|(1<<CS21)|(1<<CS20); //Configurando Modo Fast PWM OCR2A | Prescaler de 1024
 220:	8c 91       	ld	r24, X
 222:	8f 60       	ori	r24, 0x0F	; 15
 224:	8c 93       	st	X, r24
 226:	08 95       	ret

00000228 <updateDutyCycle2>:

	//OCR2A = (MIN2 & 0xFF);
}

void updateDutyCycle2(uint8_t valor_ADC){
	uint8_t Mappeo2 = (valor_ADC/6);
 228:	9b ea       	ldi	r25, 0xAB	; 171
 22a:	89 9f       	mul	r24, r25
 22c:	81 2d       	mov	r24, r1
 22e:	11 24       	eor	r1, r1
 230:	86 95       	lsr	r24
 232:	86 95       	lsr	r24
	OCR2A = Mappeo2;
 234:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 238:	08 95       	ret

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
