
Prelab 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000206  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000235  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000243  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e4  00000000  00000000  0000027b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000698  00000000  00000000  00000c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d1  00000000  00000000  000012f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000015c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000164  00000164  000001f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.init    00000022  00000108  00000108  0000019c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.incremento 00000012  00000140  00000140  000001d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.decremento 00000012  00000152  00000152  000001e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    00000046  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.contador 00000001  00800100  00800100  00000206  2**0
                  ALLOC
 19 .text.__dummy_fini 00000002  0000016c  0000016c  00000200  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  0000016e  0000016e  00000202  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  00000170  00000170  00000204  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  0000012a  0000012a  000001be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  00000168  00000168  000001fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
   8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
   c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  10:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  14:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  18:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  1c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  20:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  24:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  28:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  30:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  34:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  38:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  3c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  40:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  44:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  48:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  4c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  50:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  54:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  58:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  5c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  60:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  64:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 95 00 	jmp	0x12a	; 0x12a <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000164 <__bad_interrupt>:
 164:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.init:

00000108 <init>:


uint8_t contador = 0;

void init(void){
	UCSR0B = 0;
 108:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	//inicializando puertos de salida.
	
	DDRD = 0xFF;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
 110:	1b b8       	out	0x0b, r1	; 11
	
	DDRB = 0xFF;
 112:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
 114:	15 b8       	out	0x05, r1	; 5
	
	// Inicializando puertos de entrada para los botones
	DDRC &= ~(1<<PC1);
 116:	87 b1       	in	r24, 0x07	; 7
 118:	8d 7f       	andi	r24, 0xFD	; 253
 11a:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1<<PC2);
 11c:	87 b1       	in	r24, 0x07	; 7
 11e:	8b 7f       	andi	r24, 0xFB	; 251
 120:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<PC1)|(1<<PC2);	//Habilita las resistencias pull up internas	
 122:	88 b1       	in	r24, 0x08	; 8
 124:	86 60       	ori	r24, 0x06	; 6
 126:	88 b9       	out	0x08, r24	; 8
 128:	08 95       	ret

Disassembly of section .text.incremento:

00000140 <incremento>:
	};


void incremento(void){
	if (contador<255){ 
 140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 144:	8f 3f       	cpi	r24, 0xFF	; 255
 146:	21 f0       	breq	.+8      	; 0x150 <incremento+0x10>
		contador++;
 148:	8f 5f       	subi	r24, 0xFF	; 255
 14a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		PORTD = contador; 
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	08 95       	ret

Disassembly of section .text.decremento:

00000152 <decremento>:
	}
};

void decremento(void){
	if (contador>0){
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 156:	88 23       	and	r24, r24
 158:	21 f0       	breq	.+8      	; 0x162 <decremento+0x10>
		contador--;
 15a:	81 50       	subi	r24, 0x01	; 1
 15c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		PORTD = contador;
 160:	8b b9       	out	0x0b, r24	; 11
 162:	08 95       	ret

Disassembly of section .text.main:

000000c2 <main>:


int main(void)
{
	
	init();
  c2:	0e 94 84 00 	call	0x108	; 0x108 <init>
	
	PORTB = (1<<PB0);
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	85 b9       	out	0x05, r24	; 5
	
    while(1)
    {
		if (!(PINC & (1<<PC1))){
  ca:	31 99       	sbic	0x06, 1	; 6
  cc:	0d c0       	rjmp	.+26     	; 0xe8 <main+0x26>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	80 e7       	ldi	r24, 0x70	; 112
  d2:	92 e0       	ldi	r25, 0x02	; 2
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x12>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x1c>
  de:	00 00       	nop
			_delay_ms(50);
			incremento();
  e0:	0e 94 a0 00 	call	0x140	; 0x140 <incremento>
			while (!(PINC & (1 << PC1))); 
  e4:	31 9b       	sbis	0x06, 1	; 6
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <main+0x22>
		};
		
		if  (!(PINC & (1<<PC2))){
  e8:	32 99       	sbic	0x06, 2	; 6
  ea:	ef cf       	rjmp	.-34     	; 0xca <main+0x8>
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	80 e7       	ldi	r24, 0x70	; 112
  f0:	92 e0       	ldi	r25, 0x02	; 2
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x30>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x3a>
  fc:	00 00       	nop
			_delay_ms(50);
			decremento();
  fe:	0e 94 a9 00 	call	0x152	; 0x152 <decremento>
			while (!(PINC & (1 << PC2)));
 102:	32 9b       	sbis	0x06, 2	; 6
 104:	fe cf       	rjmp	.-4      	; 0x102 <main+0x40>
 106:	e1 cf       	rjmp	.-62     	; 0xca <main+0x8>

Disassembly of section .text.__dummy_fini:

0000016c <_fini>:
 16c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000016e <__funcs_on_exit>:
 16e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000170 <__simulator_exit>:
 170:	08 95       	ret

Disassembly of section .text.exit:

0000012a <exit>:
 12a:	ec 01       	movw	r28, r24
 12c:	0e 94 b7 00 	call	0x16e	; 0x16e <__funcs_on_exit>
 130:	0e 94 b6 00 	call	0x16c	; 0x16c <_fini>
 134:	ce 01       	movw	r24, r28
 136:	0e 94 b8 00 	call	0x170	; 0x170 <__simulator_exit>
 13a:	ce 01       	movw	r24, r28
 13c:	0e 94 b4 00 	call	0x168	; 0x168 <_Exit>

Disassembly of section .text._Exit:

00000168 <_Exit>:
 168:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
