
Prelaboratorio 6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000170  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010e  0080010e  00000212  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000776  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b6  00000000  00000000  00000a42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000311  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  0000140c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d7  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b2  00000000  00000000  00001873  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001925  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 93 00 	call	0x126	; 0x126 <main>
  9e:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART9600>:
//Función de recepción UART
unsigned char ReadUART (void){
	//Espera recibir un dato
	while (!(UCSR0A & (1<<RXC0)));
	return UDR0; 	//Devuelve el dato
}
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	8a b1       	in	r24, 0x0a	; 10
  ac:	8e 7f       	andi	r24, 0xFE	; 254
  ae:	8a b9       	out	0x0a, r24	; 10
  b0:	8a b1       	in	r24, 0x0a	; 10
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	8a b9       	out	0x0a, r24	; 10
  b6:	8a b1       	in	r24, 0x0a	; 10
  b8:	80 6c       	ori	r24, 0xC0	; 192
  ba:	8a b9       	out	0x0a, r24	; 10
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	8f 7b       	andi	r24, 0xBF	; 191
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	8b b1       	in	r24, 0x0b	; 11
  c4:	8f 77       	andi	r24, 0x7F	; 127
  c6:	8b b9       	out	0x0b, r24	; 11
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	15 b8       	out	0x05, r1	; 5
  ce:	c0 ec       	ldi	r28, 0xC0	; 192
  d0:	d0 e0       	ldi	r29, 0x00	; 0
  d2:	18 82       	st	Y, r1
  d4:	a1 ec       	ldi	r26, 0xC1	; 193
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	1c 92       	st	X, r1
  da:	e2 ec       	ldi	r30, 0xC2	; 194
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	10 82       	st	Z, r1
  e0:	88 81       	ld	r24, Y
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	88 83       	st	Y, r24
  e6:	8c 91       	ld	r24, X
  e8:	88 69       	ori	r24, 0x98	; 152
  ea:	8c 93       	st	X, r24
  ec:	80 81       	ld	r24, Z
  ee:	86 60       	ori	r24, 0x06	; 6
  f0:	80 83       	st	Z, r24
  f2:	8f ec       	ldi	r24, 0xCF	; 207
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <writeTextUART>:

void writeTextUART(char* texto) {
 104:	ac 01       	movw	r20, r24
	uint8_t i;
	for (i = 0; texto[i]!= '\0'; i++){
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	07 c0       	rjmp	.+14     	; 0x118 <writeTextUART+0x14>
		while (!(UCSR0A & (1<<UDRE0)));
 10a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 10e:	95 ff       	sbrs	r25, 5
 110:	fc cf       	rjmp	.-8      	; 0x10a <writeTextUART+0x6>
		UDR0 = texto[i];
 112:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return UDR0; 	//Devuelve el dato
}

void writeTextUART(char* texto) {
	uint8_t i;
	for (i = 0; texto[i]!= '\0'; i++){
 116:	2f 5f       	subi	r18, 0xFF	; 255
 118:	fa 01       	movw	r30, r20
 11a:	e2 0f       	add	r30, r18
 11c:	f1 1d       	adc	r31, r1
 11e:	30 81       	ld	r19, Z
 120:	31 11       	cpse	r19, r1
 122:	f3 cf       	rjmp	.-26     	; 0x10a <writeTextUART+0x6>
		while (!(UCSR0A & (1<<UDRE0)));
		UDR0 = texto[i];
	}
	
}
 124:	08 95       	ret

00000126 <main>:
volatile char bufferRX; 


int main(void)
{
    initUART9600(); 
 126:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART9600>
	sei(); 
 12a:	78 94       	sei
	
	//writeUART('H'); 
	writeTextUART("hola mundo XD");
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 82 00 	call	0x104	; 0x104 <writeTextUART>
    while (1) 
    {
		/*PORTD = (bufferRX & 0b00000011)>>6;
		PORTB = (bufferRX & 0b11111100)<<2;*/
		PORTB = bufferRX;
 134:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 138:	85 b9       	out	0x05, r24	; 5
 13a:	fc cf       	rjmp	.-8      	; 0x134 <main+0xe>

0000013c <__vector_18>:
	}
	
}

//Funciones de interrupción 
ISR(USART_RX_vect){
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
	bufferRX = UDR0; 
 148:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 14c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	
	while (!(UCSR0A & (1<<UDRE0)));
 150:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 154:	85 ff       	sbrs	r24, 5
 156:	fc cf       	rjmp	.-8      	; 0x150 <__vector_18+0x14>
	UDR0 = bufferRX;
 158:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 15c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
 160:	8f 91       	pop	r24
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
