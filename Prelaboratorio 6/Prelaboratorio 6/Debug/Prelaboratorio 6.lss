
Prelaboratorio 6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c6  00800100  00000434  000004c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000434  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008001c6  008001c6  0000058e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000058e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009dc  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000752  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f2  00000000  00000000  00001786  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00001c78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048b  00000000  00000000  00001d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c4  00000000  00000000  00002213  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000024d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3c       	cpi	r26, 0xC6	; 198
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 ec       	ldi	r26, 0xC6	; 198
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 3c       	cpi	r26, 0xCA	; 202
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 05 01 	call	0x20a	; 0x20a <main>
  9e:	0c 94 18 02 	jmp	0x430	; 0x430 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART9600>:
	writeTextUART("\n Salir"); 
    }
}

//Funciones
void initUART9600(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
	DDRD &= ~(1<<DDD0);		//Entrada RX
  aa:	8a b1       	in	r24, 0x0a	; 10
  ac:	8e 7f       	andi	r24, 0xFE	; 254
  ae:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);		//Salida TX
  b0:	8a b1       	in	r24, 0x0a	; 10
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	8a b9       	out	0x0a, r24	; 10
	
	DDRD |= (1<<DDD6)|(1<<DDD7); //Configurando salidas para LEDS
  b6:	8a b1       	in	r24, 0x0a	; 10
  b8:	80 6c       	ori	r24, 0xC0	; 192
  ba:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PORTD6); 
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	8f 7b       	andi	r24, 0xBF	; 191
  c0:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<PORTD7);
  c2:	8b b1       	in	r24, 0x0b	; 11
  c4:	8f 77       	andi	r24, 0x7F	; 127
  c6:	8b b9       	out	0x0b, r24	; 11
	
	DDRB = 0xFF; 
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	84 b9       	out	0x04, r24	; 4
	PORTB = 0; 
  cc:	15 b8       	out	0x05, r1	; 5
	
	UCSR0A = 0; 
  ce:	c0 ec       	ldi	r28, 0xC0	; 192
  d0:	d0 e0       	ldi	r29, 0x00	; 0
  d2:	18 82       	st	Y, r1
	UCSR0B = 0; 
  d4:	a1 ec       	ldi	r26, 0xC1	; 193
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	1c 92       	st	X, r1
	UCSR0C = 0; 
  da:	e2 ec       	ldi	r30, 0xC2	; 194
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	10 82       	st	Z, r1
	
	UCSR0A |= (1<<U2X0);	//Configurar A Modo Fast U2X0 = 1
  e0:	88 81       	ld	r24, Y
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	88 83       	st	Y, r24
	
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);	//Configurar B > Habilitar ISR RX, Habilitarmos RX y TX
  e6:	8c 91       	ld	r24, X
  e8:	88 69       	ori	r24, 0x98	; 152
  ea:	8c 93       	st	X, r24
	
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);		//Configurar C > Frame: 8 bits de datos, no paridad, 1 bit de stop
  ec:	80 81       	ld	r24, Z
  ee:	86 60       	ori	r24, 0x06	; 6
  f0:	80 83       	st	Z, r24
	
	UBRR0 = 207; //Usando un Baudrate de 9600
  f2:	8f ec       	ldi	r24, 0xCF	; 207
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <writeUART>:

//Función de transmisión UART
void writeUART(char caracter) { 
	while (!(UCSR0A & (1<<UDRE0)));
 104:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 108:	95 ff       	sbrs	r25, 5
 10a:	fc cf       	rjmp	.-8      	; 0x104 <writeUART>
	UDR0 = caracter; 
 10c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 110:	08 95       	ret

00000112 <writeTextUART>:
}

void writeTextUART(char* texto) {
 112:	ac 01       	movw	r20, r24
	uint8_t i;
	for (i = 0; texto[i]!= '\0'; i++){
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	07 c0       	rjmp	.+14     	; 0x126 <writeTextUART+0x14>
		while (!(UCSR0A & (1<<UDRE0)));
 118:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 11c:	95 ff       	sbrs	r25, 5
 11e:	fc cf       	rjmp	.-8      	; 0x118 <writeTextUART+0x6>
		UDR0 = texto[i];
 120:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	UDR0 = caracter; 
}

void writeTextUART(char* texto) {
	uint8_t i;
	for (i = 0; texto[i]!= '\0'; i++){
 124:	2f 5f       	subi	r18, 0xFF	; 255
 126:	fa 01       	movw	r30, r20
 128:	e2 0f       	add	r30, r18
 12a:	f1 1d       	adc	r31, r1
 12c:	30 81       	ld	r19, Z
 12e:	31 11       	cpse	r19, r1
 130:	f3 cf       	rjmp	.-26     	; 0x118 <writeTextUART+0x6>
		while (!(UCSR0A & (1<<UDRE0)));
		UDR0 = texto[i];
	}	
}
 132:	08 95       	ret

00000134 <initADC>:

//Función de configuración del ADC en el puerto A5 (Puerto C5) 
void initADC(void){
	//Configuración del ADC
	ADMUX = 0b0101; //Selectiona el puerto ADC5
 134:	ac e7       	ldi	r26, 0x7C	; 124
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	85 e0       	ldi	r24, 0x05	; 5
 13a:	8c 93       	st	X, r24
	ADCSRA = 0;
 13c:	ea e7       	ldi	r30, 0x7A	; 122
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	10 82       	st	Z, r1
	ADMUX |= (1<<ADLAR); //AJUSTE A LA IZQUIERDA (SOLO SE USA ADCH)
 142:	8c 91       	ld	r24, X
 144:	80 62       	ori	r24, 0x20	; 32
 146:	8c 93       	st	X, r24
	ADMUX |= (1<<REFS0); //Selecciona un voltaje interno de referencia de 5V.
 148:	8c 91       	ld	r24, X
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	8c 93       	st	X, r24
	ADMUX &= ~(1<<REFS1);
 14e:	8c 91       	ld	r24, X
 150:	8f 77       	andi	r24, 0x7F	; 127
 152:	8c 93       	st	X, r24
	
	//SE ENCIENDE ADC
	ADCSRA |= (1<<ADEN);
 154:	80 81       	ld	r24, Z
 156:	80 68       	ori	r24, 0x80	; 128
 158:	80 83       	st	Z, r24
	
	// SE HABILITA LA INTERRUPCIÓN DEL ADC
	ADCSRA |= (1<<ADIE);
 15a:	80 81       	ld	r24, Z
 15c:	88 60       	ori	r24, 0x08	; 8
 15e:	80 83       	st	Z, r24
	
	//PRESCALER DE 128 (125kHZ)
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 160:	80 81       	ld	r24, Z
 162:	87 60       	ori	r24, 0x07	; 7
 164:	80 83       	st	Z, r24
	
	//Deshabilita la entrada digital PC5
	DIDR0 |= (1<<ADC5D);
 166:	ee e7       	ldi	r30, 0x7E	; 126
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	80 62       	ori	r24, 0x20	; 32
 16e:	80 83       	st	Z, r24
 170:	08 95       	ret

00000172 <ConvertADC>:

};

void ConvertADC(uint8_t conversionADC){
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
	uint8_t unidades, decenas, centenas; 
	
	unidades = conversionADC % 10;						//ej. 156 %10 = 6
 176:	2d ec       	ldi	r18, 0xCD	; 205
 178:	82 9f       	mul	r24, r18
 17a:	c1 2d       	mov	r28, r1
 17c:	11 24       	eor	r1, r1
 17e:	c6 95       	lsr	r28
 180:	c6 95       	lsr	r28
 182:	c6 95       	lsr	r28
 184:	cc 0f       	add	r28, r28
 186:	9c 2f       	mov	r25, r28
 188:	99 0f       	add	r25, r25
 18a:	99 0f       	add	r25, r25
 18c:	c9 0f       	add	r28, r25
 18e:	98 2f       	mov	r25, r24
 190:	9c 1b       	sub	r25, r28
 192:	c9 2f       	mov	r28, r25
	conversionADC = (conversionADC - unidades)/10;		//(156-6)10 = 150/10 = 15
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	8c 1b       	sub	r24, r28
 198:	91 09       	sbc	r25, r1
 19a:	ea e0       	ldi	r30, 0x0A	; 10
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	bf 01       	movw	r22, r30
 1a0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <__divmodhi4>
	decenas = conversionADC % 10;						//15%10 = 5
 1a4:	62 9f       	mul	r22, r18
 1a6:	d1 2d       	mov	r29, r1
 1a8:	11 24       	eor	r1, r1
 1aa:	d6 95       	lsr	r29
 1ac:	d6 95       	lsr	r29
 1ae:	d6 95       	lsr	r29
 1b0:	dd 0f       	add	r29, r29
 1b2:	8d 2f       	mov	r24, r29
 1b4:	88 0f       	add	r24, r24
 1b6:	88 0f       	add	r24, r24
 1b8:	d8 0f       	add	r29, r24
 1ba:	86 2f       	mov	r24, r22
 1bc:	8d 1b       	sub	r24, r29
 1be:	d8 2f       	mov	r29, r24
	conversionADC = (conversionADC - decenas)/10;		//(15-5)/10 = 1
 1c0:	77 27       	eor	r23, r23
 1c2:	cb 01       	movw	r24, r22
 1c4:	8d 1b       	sub	r24, r29
 1c6:	91 09       	sbc	r25, r1
 1c8:	bf 01       	movw	r22, r30
 1ca:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <__divmodhi4>
	centenas = conversionADC % 10;						//1%10 = 1
 1ce:	62 9f       	mul	r22, r18
 1d0:	81 2d       	mov	r24, r1
 1d2:	11 24       	eor	r1, r1
 1d4:	86 95       	lsr	r24
 1d6:	86 95       	lsr	r24
 1d8:	86 95       	lsr	r24
 1da:	88 0f       	add	r24, r24
 1dc:	28 2f       	mov	r18, r24
 1de:	22 0f       	add	r18, r18
 1e0:	22 0f       	add	r18, r18
 1e2:	82 0f       	add	r24, r18
 1e4:	68 1b       	sub	r22, r24
 1e6:	86 2f       	mov	r24, r22
	
	writeUART(CERO + centenas); 
 1e8:	80 5d       	subi	r24, 0xD0	; 208
 1ea:	0e 94 82 00 	call	0x104	; 0x104 <writeUART>
	writeUART(CERO + decenas); 
 1ee:	80 e3       	ldi	r24, 0x30	; 48
 1f0:	8d 0f       	add	r24, r29
 1f2:	0e 94 82 00 	call	0x104	; 0x104 <writeUART>
	writeUART(CERO + unidades); 
 1f6:	80 e3       	ldi	r24, 0x30	; 48
 1f8:	8c 0f       	add	r24, r28
 1fa:	0e 94 82 00 	call	0x104	; 0x104 <writeUART>
	
	
	writeUART('\n');
 1fe:	8a e0       	ldi	r24, 0x0A	; 10
 200:	0e 94 82 00 	call	0x104	; 0x104 <writeUART>
	//writeUART('\r');
}
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <main>:
volatile char bufferRX; 


int main(void)
{
	cli();
 20a:	f8 94       	cli
    initUART9600(); 
 20c:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART9600>
	initADC();
 210:	0e 94 9a 00 	call	0x134	; 0x134 <initADC>
	sei(); 
 214:	78 94       	sei
	
	//writeUART('H'); 
	//writeTextUART("\n Hola Pedro XD");
    while (1) 
    {
		writeUART(opcion);
 216:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <opcion>
 21a:	0e 94 82 00 	call	0x104	; 0x104 <writeUART>
		if (flag_ASCII == 1){
 21e:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__data_end>
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	61 f4       	brne	.+24     	; 0x23e <main+0x34>
			PORTD = (opcion & 0b00000011)<<6;
 226:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <opcion>
 22a:	20 e4       	ldi	r18, 0x40	; 64
 22c:	82 9f       	mul	r24, r18
 22e:	c0 01       	movw	r24, r0
 230:	11 24       	eor	r1, r1
 232:	8b b9       	out	0x0b, r24	; 11
			PORTB = (opcion & 0b11111100)>>2;
 234:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <opcion>
 238:	86 95       	lsr	r24
 23a:	86 95       	lsr	r24
 23c:	85 b9       	out	0x05, r24	; 5
			
		}
		
		if (bandera_menu == 1){
 23e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	09 f0       	breq	.+2      	; 0x248 <main+0x3e>
 246:	45 c0       	rjmp	.+138    	; 0x2d2 <main+0xc8>
			opcion = 0; 
 248:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <opcion>
			writeTextUART("\n 1. Leer potenciómetro.");
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	0e 94 89 00 	call	0x112	; 0x112 <writeTextUART>
			writeTextUART("\n 2. Enviar ASCII.");
 254:	8a e1       	ldi	r24, 0x1A	; 26
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	0e 94 89 00 	call	0x112	; 0x112 <writeTextUART>
			writeUART(opcion);
 25c:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <opcion>
 260:	0e 94 82 00 	call	0x104	; 0x104 <writeUART>
			while (!((opcion == UNO)||(opcion == DOS))); 
 264:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <opcion>
 268:	9f ec       	ldi	r25, 0xCF	; 207
 26a:	98 0f       	add	r25, r24
 26c:	92 30       	cpi	r25, 0x02	; 2
 26e:	d0 f7       	brcc	.-12     	; 0x264 <main+0x5a>
			writeUART(opcion);
 270:	0e 94 82 00 	call	0x104	; 0x104 <writeUART>
			
			
			switch (opcion){
 274:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <opcion>
 278:	81 33       	cpi	r24, 0x31	; 49
 27a:	19 f0       	breq	.+6      	; 0x282 <main+0x78>
 27c:	82 33       	cpi	r24, 0x32	; 50
 27e:	99 f0       	breq	.+38     	; 0x2a6 <main+0x9c>
 280:	28 c0       	rjmp	.+80     	; 0x2d2 <main+0xc8>
				case UNO: 
					ADCSRA |= (1<< ADSC); 
 282:	ea e7       	ldi	r30, 0x7A	; 122
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	80 64       	ori	r24, 0x40	; 64
 28a:	80 83       	st	Z, r24
					ConvertADC(lectura_ADC); 
 28c:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <lectura_ADC>
 290:	0e 94 b9 00 	call	0x172	; 0x172 <ConvertADC>
					bandera_menu = 0; 
 294:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 298:	8f e3       	ldi	r24, 0x3F	; 63
 29a:	9c e9       	ldi	r25, 0x9C	; 156
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <main+0x92>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <main+0x98>
 2a2:	00 00       	nop
 2a4:	16 c0       	rjmp	.+44     	; 0x2d2 <main+0xc8>
					_delay_ms(10); 
					break; 
				case DOS: 
					bandera_menu = 0;
 2a6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
					writeTextUART("Ingrese un ASCII"); 
 2aa:	8d e2       	ldi	r24, 0x2D	; 45
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	0e 94 89 00 	call	0x112	; 0x112 <writeTextUART>
					PORTD = (bufferRX & 0b00000011)<<6;
 2b2:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <bufferRX>
 2b6:	20 e4       	ldi	r18, 0x40	; 64
 2b8:	82 9f       	mul	r24, r18
 2ba:	c0 01       	movw	r24, r0
 2bc:	11 24       	eor	r1, r1
 2be:	8b b9       	out	0x0b, r24	; 11
					PORTB = (bufferRX & 0b11111100)>>2;
 2c0:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <bufferRX>
 2c4:	86 95       	lsr	r24
 2c6:	86 95       	lsr	r24
 2c8:	85 b9       	out	0x05, r24	; 5
					while (bandera_menu == 0); 
 2ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ce:	88 23       	and	r24, r24
 2d0:	e1 f3       	breq	.-8      	; 0x2ca <main+0xc0>
					break; 
			}//fin swithc
			
		}//fin del if 
		
	bandera_menu = 1; 
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	writeTextUART("\n Salir"); 
 2d8:	8e e3       	ldi	r24, 0x3E	; 62
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	0e 94 89 00 	call	0x112	; 0x112 <writeTextUART>
    }
 2e0:	9a cf       	rjmp	.-204    	; 0x216 <main+0xc>

000002e2 <__vector_18>:
	//writeUART('\r');
}


//Funciones de interrupción ------------------------------------------------------------------------------------------
ISR(USART_RX_vect){
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	2f 93       	push	r18
 2ee:	3f 93       	push	r19
 2f0:	4f 93       	push	r20
 2f2:	5f 93       	push	r21
 2f4:	6f 93       	push	r22
 2f6:	7f 93       	push	r23
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
 2fc:	af 93       	push	r26
 2fe:	bf 93       	push	r27
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
	bufferRX = UDR0; 
 304:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 308:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <bufferRX>
	opcion = bufferRX;
 30c:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <bufferRX>
 310:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <opcion>
	
	
	
	if (bandera_menu == 1){
 314:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 318:	91 30       	cpi	r25, 0x01	; 1
 31a:	d9 f4       	brne	.+54     	; 0x352 <__vector_18+0x70>
		if (opcion == UNO) {
 31c:	81 33       	cpi	r24, 0x31	; 49
 31e:	39 f4       	brne	.+14     	; 0x32e <__vector_18+0x4c>
			flag_ASCII = 0;
 320:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <__data_end>
			writeTextUART("\n Leyendo el potenciómetro...");
 324:	86 e4       	ldi	r24, 0x46	; 70
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 89 00 	call	0x112	; 0x112 <writeTextUART>
 32c:	12 c0       	rjmp	.+36     	; 0x352 <__vector_18+0x70>

		} else if (opcion == DOS){
 32e:	82 33       	cpi	r24, 0x32	; 50
 330:	61 f4       	brne	.+24     	; 0x34a <__vector_18+0x68>
			flag_ASCII = 1;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <__data_end>
			//writeUART(CERO + flag_ASCII);
			writeTextUART("\n Leyendo ASCII desde la terminal serial...");
 338:	84 e6       	ldi	r24, 0x64	; 100
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 89 00 	call	0x112	; 0x112 <writeTextUART>
			writeUART(opcion);
 340:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <opcion>
 344:	0e 94 82 00 	call	0x104	; 0x104 <writeUART>
 348:	04 c0       	rjmp	.+8      	; 0x352 <__vector_18+0x70>
		} else {writeTextUART("\n Su digitación no es válida, ingrese un valor 1 o 2.");}
 34a:	80 e9       	ldi	r24, 0x90	; 144
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	0e 94 89 00 	call	0x112	; 0x112 <writeTextUART>
		} //fin if

	
	if (bandera_menu == 0){
 352:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 356:	81 11       	cpse	r24, r1
 358:	0f c0       	rjmp	.+30     	; 0x378 <__vector_18+0x96>
		PORTD = (bufferRX & 0b00000011)<<6;
 35a:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <bufferRX>
 35e:	20 e4       	ldi	r18, 0x40	; 64
 360:	82 9f       	mul	r24, r18
 362:	c0 01       	movw	r24, r0
 364:	11 24       	eor	r1, r1
 366:	8b b9       	out	0x0b, r24	; 11
		PORTB = (bufferRX & 0b11111100)>>2;
 368:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <bufferRX>
 36c:	86 95       	lsr	r24
 36e:	86 95       	lsr	r24
 370:	85 b9       	out	0x05, r24	; 5
		bandera_menu = 1; 
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	
	//while (!(UCSR0A & (1<<UDRE0)));
	//UDR0 = bufferRX;
	
}
 378:	ff 91       	pop	r31
 37a:	ef 91       	pop	r30
 37c:	bf 91       	pop	r27
 37e:	af 91       	pop	r26
 380:	9f 91       	pop	r25
 382:	8f 91       	pop	r24
 384:	7f 91       	pop	r23
 386:	6f 91       	pop	r22
 388:	5f 91       	pop	r21
 38a:	4f 91       	pop	r20
 38c:	3f 91       	pop	r19
 38e:	2f 91       	pop	r18
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <__vector_21>:

ISR(ADC_vect){
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	8f 93       	push	r24
 3a6:	ef 93       	push	r30
 3a8:	ff 93       	push	r31
	lectura_ADC = ADCH; 
 3aa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 3ae:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <lectura_ADC>
	PORTD=(lectura_ADC<<6);
 3b2:	82 95       	swap	r24
 3b4:	88 0f       	add	r24, r24
 3b6:	88 0f       	add	r24, r24
 3b8:	80 7c       	andi	r24, 0xC0	; 192
 3ba:	8b b9       	out	0x0b, r24	; 11
	PORTB=(lectura_ADC>>2); 
 3bc:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <lectura_ADC>
 3c0:	86 95       	lsr	r24
 3c2:	86 95       	lsr	r24
 3c4:	85 b9       	out	0x05, r24	; 5
	ADCSRA |= (1<<ADIF); 
 3c6:	ea e7       	ldi	r30, 0x7A	; 122
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	80 61       	ori	r24, 0x10	; 16
 3ce:	80 83       	st	Z, r24
	
 3d0:	ff 91       	pop	r31
 3d2:	ef 91       	pop	r30
 3d4:	8f 91       	pop	r24
 3d6:	0f 90       	pop	r0
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	0f 90       	pop	r0
 3dc:	1f 90       	pop	r1
 3de:	18 95       	reti

000003e0 <__divmodhi4>:
 3e0:	97 fb       	bst	r25, 7
 3e2:	07 2e       	mov	r0, r23
 3e4:	16 f4       	brtc	.+4      	; 0x3ea <__divmodhi4+0xa>
 3e6:	00 94       	com	r0
 3e8:	07 d0       	rcall	.+14     	; 0x3f8 <__divmodhi4_neg1>
 3ea:	77 fd       	sbrc	r23, 7
 3ec:	09 d0       	rcall	.+18     	; 0x400 <__divmodhi4_neg2>
 3ee:	0e 94 04 02 	call	0x408	; 0x408 <__udivmodhi4>
 3f2:	07 fc       	sbrc	r0, 7
 3f4:	05 d0       	rcall	.+10     	; 0x400 <__divmodhi4_neg2>
 3f6:	3e f4       	brtc	.+14     	; 0x406 <__divmodhi4_exit>

000003f8 <__divmodhi4_neg1>:
 3f8:	90 95       	com	r25
 3fa:	81 95       	neg	r24
 3fc:	9f 4f       	sbci	r25, 0xFF	; 255
 3fe:	08 95       	ret

00000400 <__divmodhi4_neg2>:
 400:	70 95       	com	r23
 402:	61 95       	neg	r22
 404:	7f 4f       	sbci	r23, 0xFF	; 255

00000406 <__divmodhi4_exit>:
 406:	08 95       	ret

00000408 <__udivmodhi4>:
 408:	aa 1b       	sub	r26, r26
 40a:	bb 1b       	sub	r27, r27
 40c:	51 e1       	ldi	r21, 0x11	; 17
 40e:	07 c0       	rjmp	.+14     	; 0x41e <__udivmodhi4_ep>

00000410 <__udivmodhi4_loop>:
 410:	aa 1f       	adc	r26, r26
 412:	bb 1f       	adc	r27, r27
 414:	a6 17       	cp	r26, r22
 416:	b7 07       	cpc	r27, r23
 418:	10 f0       	brcs	.+4      	; 0x41e <__udivmodhi4_ep>
 41a:	a6 1b       	sub	r26, r22
 41c:	b7 0b       	sbc	r27, r23

0000041e <__udivmodhi4_ep>:
 41e:	88 1f       	adc	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	5a 95       	dec	r21
 424:	a9 f7       	brne	.-22     	; 0x410 <__udivmodhi4_loop>
 426:	80 95       	com	r24
 428:	90 95       	com	r25
 42a:	bc 01       	movw	r22, r24
 42c:	cd 01       	movw	r24, r26
 42e:	08 95       	ret

00000430 <_exit>:
 430:	f8 94       	cli

00000432 <__stop_program>:
 432:	ff cf       	rjmp	.-2      	; 0x432 <__stop_program>
